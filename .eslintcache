[{"/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/Application.js":"1","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/interfaces/index.js":"2","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/models/BEPRO/Network.js":"3","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/models/ERC20/ERC20Contract.js":"4","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/models/ERC20/ERC20TokenLock.js":"5","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/models/ERC721/ERC721Collectibles.js":"6","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/models/ERC721/ERC721Standard.js":"7","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/models/IContract.js":"8","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/models/PredictionMarkets/ExchangeContract.js":"9","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/models/Staking/StakingContract.js":"10","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/models/custom/RealFvr/OpenerRealFvr.js":"11","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/models/index.js":"12","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/utils/Account.js":"13","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/utils/Contract.js":"14","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/utils/IPFS.js":"15","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/utils/Numbers.js":"16"},{"size":7643,"mtime":1620835746367,"results":"17","hashOfConfig":"18"},{"size":617,"mtime":1620821752496,"results":"19","hashOfConfig":"18"},{"size":12747,"mtime":1620821752496,"results":"20","hashOfConfig":"18"},{"size":4707,"mtime":1620821752496,"results":"21","hashOfConfig":"18"},{"size":9992,"mtime":1620821752497,"results":"22","hashOfConfig":"18"},{"size":7653,"mtime":1620821752497,"results":"23","hashOfConfig":"18"},{"size":2635,"mtime":1620821752498,"results":"24","hashOfConfig":"18"},{"size":6890,"mtime":1620821752498,"results":"25","hashOfConfig":"18"},{"size":9187,"mtime":1620821752499,"results":"26","hashOfConfig":"18"},{"size":11936,"mtime":1620821752499,"results":"27","hashOfConfig":"18"},{"size":10527,"mtime":1620821752499,"results":"28","hashOfConfig":"18"},{"size":550,"mtime":1620821752500,"results":"29","hashOfConfig":"18"},{"size":803,"mtime":1620821752500,"results":"30","hashOfConfig":"18"},{"size":3908,"mtime":1620821752502,"results":"31","hashOfConfig":"18"},{"size":167,"mtime":1620821752502,"results":"32","hashOfConfig":"18"},{"size":2588,"mtime":1620821752503,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"153lugq",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":64,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/Application.js",["76"],"/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/interfaces/index.js",[],"/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/models/BEPRO/Network.js",["77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100"],"/* eslint-disable no-underscore-dangle */\n// eslint-disable-next-line no-unused-vars\nimport _ from 'lodash';\nimport { beproNetwork } from '../../interfaces';\nimport Numbers from '../../utils/Numbers';\nimport IContract from '../IContract';\nimport ERC20Contract from '../ERC20/ERC20Contract';\n\nconst beproAddress = '0xCF3C8Be2e2C42331Da80EF210e9B1b307C03d36A';\n\n/**\n * BEPRONetwork Object\n * @class BEPRONetwork\n * @param params.web3 {Web3}\n * @param params.contractAddress {Address}\n * @param params.acc {*}\n * @param params.abi {beproNetwork}\n */\nclass BEPRONetwork extends IContract {\n  constructor(params) {\n    super({ abi: beproNetwork, ...params });\n  }\n\n  __assert = async () => {\n    if (!this.getAddress()) {\n      throw new Error(\n        'Contract is not deployed, first deploy it and provide a contract address',\n      );\n    }\n\n    // Use ABI\n    this.params.contract.use(beproNetwork, this.getAddress());\n\n    // Set Token Address Contract for easy access\n    this.params.ERC20Contract = new ERC20Contract({\n      web3: this.web3,\n      contractAddress: beproAddress,\n      acc: this.acc,\n    });\n\n    // Assert Token Contract\n    await this.params.ERC20Contract.__assert();\n  };\n\n  /**\n   * @function\n   * @description Get Open Issues Available\n   * @param {Address} address\n   * @returns {Integer | Array}\n   */\n  async getIssuesByAddress(address) {\n    const res = await this.params.contract\n      .getContract()\n      .methods.getIssuesByAddress(address)\n      .call();\n\n    return res.map(r => parseInt(r, 10));\n  }\n\n  /**\n   * @function\n   * @description Get Amount of Issues Opened in the network\n   * @returns {Integer}\n   */\n  async getAmountofIssuesOpened() {\n    return parseInt(\n      await this.params.contract.getContract().methods.incrementIssueID().call(),\n      10,\n    );\n  }\n\n  /**\n   * @function\n   * @description Get Amount of Issues Closed in the network\n   * @returns {Integer}\n   */\n  async getAmountofIssuesClosed() {\n    return parseInt(\n      await this.params.contract.getContract().methods.closedIdsCount().call(),\n      10,\n    );\n  }\n\n  /**\n   * @function\n   * @description Get Amount of Needed for Approve\n   * @returns {Integer}\n   */\n  async percentageNeededForApprove() {\n    return parseInt(\n      await this.params.contract\n        .getContract()\n        .methods.percentageNeededForApprove()\n        .call(),\n      10,\n    );\n  }\n\n  /**\n   * @function\n   * @description Get Amount of Needed for Merge\n   * @returns {Integer}\n   */\n  async percentageNeededForMerge() {\n    return parseInt(\n      await this.params.contract\n        .getContract()\n        .methods.percentageNeededForMerge()\n        .call(),\n      10,\n    );\n  }\n\n  /**\n   * @function\n   * @description Get Total Amount of BEPRO Staked for Tickets in the network\n   * @returns {Integer}\n   */\n  async getBEPROStaked() {\n    return Numbers.fromDecimals(\n      await this.params.contract.getContract().methods.totalStaked().call(),\n      18,\n    );\n  }\n\n  /**\n   * @function\n   * @description GetTotal amount of time where an issue has to be approved\n   * @returns {Date}\n   */\n  async timeOpenForIssueApprove() {\n    return Numbers.fromSmartContractTimeToMinutes(\n      await this.params.contract\n        .getContract()\n        .methods.timeOpenForIssueApprove()\n        .call(),\n    );\n  }\n\n  /**\n   * @function\n   * @description Get Total Amount of BEPRO Staked for Tickets in the network\n   * @returns {Integer}\n   */\n  async beproVotesStaked() {\n    return Numbers.fromDecimals(\n      await this.params.contract\n        .getContract()\n        .methods.beproVotesStaked()\n        .call(),\n      18,\n    );\n  }\n\n  /**\n   * @function\n   * @description Get Total Amount of BEPRO Staked for Council in the network\n   * @returns {Integer}\n   */\n  async COUNCIL_BEPRO_AMOUNT() {\n    return Numbers.fromDecimals(\n      await this.params.contract\n        .getContract()\n        .methods.COUNCIL_BEPRO_AMOUNT()\n        .call(),\n      18,\n    );\n  }\n\n  /**\n   * @function\n   * @description Get Total Amount of BEPRO Staked for Operator in the network\n   * @returns {Integer}\n   */\n  async OPERATOR_BEPRO_AMOUNT() {\n    return Numbers.fromDecimals(\n      await this.params.contract\n        .getContract()\n        .methods.OPERATOR_BEPRO_AMOUNT()\n        .call(),\n      18,\n    );\n  }\n\n  /**\n   * @function\n   * @description Get Total Amount of BEPRO Staked for Developer in the network\n   * @returns {Integer}\n   */\n  async DEVELOPER_BEPRO_AMOUNT() {\n    return Numbers.fromDecimals(\n      await this.params.contract\n        .getContract()\n        .methods.DEVELOPER_BEPRO_AMOUNT()\n        .call(),\n      18,\n    );\n  }\n\n  /**\n   * @function\n   * @description Is issue Approved\n   * @param {Integer} issueId\n   * @returns {Bool}\n   */\n  async isIssueApproved({ issueId }) {\n    return await this.params.contract\n      .getContract()\n      .methods.isIssueApproved(issueId)\n      .call();\n  }\n\n  /**\n   * @function\n   * @description Is issue available to be approved (time wise)\n   * @param {Integer} issueId\n   * @returns {Bool}\n   */\n  async isIssueApprovable({ issueId }) {\n    return await this.params.contract\n      .getContract()\n      .methods.isIssueApprovable(issueId)\n      .call();\n  }\n\n  /**\n   * @function\n   * @description Is issue mergeable\n   * @param {Integer} issueId\n   * @param {Integer} mergeId\n   * @returns {Bool}\n   */\n  async isIssueMergeable({ issueId, mergeId }) {\n    return await this.params.contract\n      .getContract()\n      .methods.isIssueMergeable(issueId, mergeId)\n      .call();\n  }\n\n  /**\n   * @function\n   * @description Is issue mergeable\n   * @param {Integer} issueId\n   * @param {Integer} mergeId\n   * @returns {Bool}\n   */\n  async isMergeTheOneWithMoreVotes({ issueId, mergeId }) {\n    return await this.params.contract\n      .getContract()\n      .methods.isMergeTheOneWithMoreVotes(issueId, mergeId)\n      .call();\n  }\n\n  /**\n   * @function\n   * @description Get Issue Id Info\n   * @param {Address} address\n   * @returns {Integer} votes\n   */\n\n  async getVotesByAddress({ address }) {\n    const r = await this.params.contract\n      .getContract()\n      .methods.getVotesByAddress(address)\n      .call();\n    return Numbers.fromDecimals(r, 18);\n  }\n\n  /**\n   * @function\n   * @description Get Issue Id Info\n   * @param {Integer} issue_id\n   * @returns {Integer} _id\n   * @returns {Integer} beproStaked\n   * @returns {Date} creationDate\n   * @returns {Address} issueGenerator\n   * @returns {Integer} votesForApprove\n   * @returns {Integer} mergeProposalsAmount\n   * @returns {Bool} finalized\n   * @returns {Bool} canceled\n   */\n\n  async getIssueById({ issue_id }) {\n    const r = await this.__sendTx(\n      this.params.contract.getContract().methods.getIssueById(issue_id),\n      true,\n    );\n\n    return {\n      _id: Numbers.fromHex(r[0]),\n      beproStaked: Numbers.fromDecimals(r[1], 18),\n      creationDate: Numbers.fromSmartContractTimeToMinutes(r[2]),\n      issueGenerator: r[3],\n      votesForApprove: Numbers.fromDecimals(r[4], 18),\n      mergeProposalsAmount: parseInt(r[5], 10),\n      finalized: r[6],\n      canceled: r[7],\n    };\n  }\n\n  /**\n   * @function\n   * @description Get Issue Id Info\n   * @param {Integer} issue_id\n   * @param {Integer} merge_id\n   * @returns {Integer} _id\n   * @returns {Integer} votes\n   * @returns {Address | Array} prAddresses\n   * @returns {Integer | Array} prAmounts\n   * @returns {Address} proposalAddress\n   */\n\n  async getMergeById({ issue_id, merge_id }) {\n    const r = await this.__sendTx(\n      this.params.contract\n        .getContract()\n        .methods.getMergeById(issue_id, merge_id),\n      true,\n    );\n\n    return {\n      _id: Numbers.fromHex(r[0]),\n      votes: Numbers.fromDecimals(r[1], 18),\n      prAddresses: r[3],\n      prAmounts: r[4] ? r[4].map(a => Numbers.fromDecimals(a, 18)) : 0,\n      proposalAddress: r[5],\n    };\n  }\n\n  /**\n   * @function\n   * @description Approve ERC20 Allowance\n   */\n  approveERC20 = async () => {\n    const totalMaxAmount = await this.getERC20Contract().totalSupply();\n    return await this.getERC20Contract().approve({\n      address: this.getAddress(),\n      amount: totalMaxAmount,\n    });\n  };\n\n  /**\n   * @function\n   * @description Verify if Approved\n   */\n  isApprovedERC20 = async ({ amount, address }) => await this.getERC20Contract().isApproved({\n    address,\n    amount,\n    spenderAddress: this.getAddress(),\n  });\n\n  /**\n   * @function\n   * @description lock BEPRO for oracles\n   * @param {integer} beproAmount\n   */\n  async lockBepro({ beproAmount }) {\n    if (beproAmount <= 0) {\n      throw new Error('Bepro Amount has to be higher than 0');\n    }\n\n    if (!(await this.isApprovedERC20({ amount, address }))) {\n      throw new Error(\"Bepro not approve for tx, first use 'approveERC20'\");\n    }\n\n    return await this.__sendTx(\n      this.params.contract.getContract().methods.lockBepro(beproAmount),\n    );\n  }\n\n  /**\n   * @function\n   * @description Unlock BEPRO for oracles\n   * @param {integer} beproAmount\n   * @param {address} from\n   */\n  async unlockBepro({ beproAmount, from }) {\n    if (beproAmount <= 0) {\n      throw new Error('Bepro Amount has to be higher than 0');\n    }\n\n    return await this.__sendTx(\n      this.params.contract.getContract().methods.unlockBepro(beproAmount, from),\n    );\n  }\n\n  /**\n   * @function\n   * @description Delegated Oracles to others\n   * @param {integer} beproAmount\n   * @param {address} delegatedTo\n   */\n  async delegateOracles({ beproAmount, delegatedTo }) {\n    if (beproAmount <= 0) {\n      throw new Error('Bepro Amount has to be higher than 0');\n    }\n\n    return await this.__sendTx(\n      this.params.contract\n        .getContract()\n        .methods.unlockBepro(beproAmount, delegatedTo),\n    );\n  }\n\n  /**\n   * @function\n   * @description open Issue\n   * @param {integer} beproAmount\n   * @param {address} address\n   */\n  async openIssue({ beproAmount, address }) {\n    if (beproAmount < 0) {\n      throw new Error('Bepro Amount has to be higher than 0');\n    }\n\n    if (!(await this.isApprovedERC20({ amount, address }))) {\n      throw new Error(\"Bepro not approve for tx, first use 'approveERC20'\");\n    }\n\n    return await this.__sendTx(\n      this.params.contract.getContract().methods.openIssue(beproAmount),\n    );\n  }\n\n  /**\n   * @function\n   * @description open Issue\n   * @param {integer} issueId\n   */\n  async approveIssue({ issueId }) {\n    return await this.__sendTx(\n      this.params.contract.getContract().methods.approveIssue(issueId),\n    );\n  }\n\n  /**\n   * @function\n   * @description redeem Issue\n   */\n  async redeemIssue({ issueId }) {\n    return await this.__sendTx(\n      this.params.contract.getContract().methods.redeemIssue(issueId),\n    );\n  }\n\n  /**\n   * @function\n   * @description open Issue\n   * @param {integer} issueId\n   * @param {integer} mergeId\n   */\n  async approveMerge({ issueId, mergeId }) {\n    return await this.__sendTx(\n      this.params.contract.getContract().methods.approveMerge(issueId, mergeId),\n    );\n  }\n\n  /**\n   * @function\n   * @description open Issue\n   * @param {integer} issueID\n   * @param {integer} beproAmount\n   * @param {address} address\n   */\n  async updateIssue({ issueID, beproAmount, address }) {\n    if (beproAmount < 0) {\n      throw new Error('Bepro Amount has to be higher than 0');\n    }\n\n    if (!(await this.isApprovedERC20({ amount, address }))) {\n      throw new Error(\"Bepro not approve for tx, first use 'approveERC20'\");\n    }\n\n    return await this.__sendTx(\n      this.params.contract\n        .getContract()\n        .methods.updateIssue(issueID, beproAmount, address),\n    );\n  }\n\n  /**\n   * @function\n   * @description Propose Merge of Issue\n   * @param {integer} issueID\n   * @param {address | Array} prAddresses\n   * @param {address | Integer} prAmounts\n   */\n  async proposeIssueMerge({ issueID, prAddresses, prAmounts }) {\n    if (prAddresses.length != prAmounts.length) {\n      throw new Error('prAddresses dont match prAmounts size');\n    }\n    return await this.__sendTx(\n      this.params.contract\n        .getContract()\n        .methods.proposeIssueMerge(issueID, prAddresses, prAmounts),\n    );\n  }\n\n  /**\n   * @function\n   * @description close Issue\n   * @param {integer} issueID\n   * @param {integer} mergeID\n   */\n  async closeIssue({ issueID, mergeID }) {\n    return await this.__sendTx(\n      this.params.contract.getContract().methods.closeIssue(issueID, mergeID),\n    );\n  }\n\n  deploy = async ({ tokenAddress, callback }) => {\n    const params = [tokenAddress];\n    const res = await this.__deploy(params, callback);\n    this.params.contractAddress = res.contractAddress;\n    /* Call to Backend API */\n    await this.__assert();\n    return res;\n  };\n\n  getERC20Contract = () => this.params.ERC20Contract;\n}\n\nexport default BEPRONetwork;\n","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/models/ERC20/ERC20Contract.js",["101","102","103","104","105","106"],"import { ierc20 } from '../../interfaces';\nimport Numbers from '../../utils/Numbers';\nimport IContract from '../IContract';\n\n/**\n * @class ERC20Contract\n * @param {Object} params Parameters\n * @param {Address} params.contractAddress Optional/If Existent\n */\nclass ERC20Contract extends IContract {\n  constructor(params = {}) {\n    super({ abi: ierc20, ...params });\n  }\n\n  __assert = async () => {\n    this.params.contract.use(ierc20, this.getAddress());\n    this.params.decimals = await this.getDecimalsAsync();\n  };\n\n  getContract() {\n    return this.params.contract.getContract();\n  }\n\n  /**\n   * @function\n   * @description Get Token Address\n   * @returns {Address} address\n   */\n  getAddress() {\n    return this.params.contractAddress;\n  }\n\n  /**\n   * @function\n   * @description Transfer Tokens\n   * @param {Object} params Parameters\n   * @param {Address} params.toAddress To Address\n   * @param {Integer} params.tokenAmount Amount of Tokens\n   * @returns {Transaction} Transaction\n   */\n  transferTokenAmount = async ({ toAddress, tokenAmount }) => {\n    const amountWithDecimals = Numbers.toSmartContractDecimals(\n      tokenAmount,\n      this.getDecimals(),\n    );\n    return await this.__sendTx(\n      this.params.contract\n        .getContract()\n        .methods.transfer(toAddress, amountWithDecimals),\n    );\n  };\n\n  /**\n   * @function\n   * @description Get Amount of Tokens User Holds\n   * @param {Address} address User Address\n   * @returns {Transaction} Transaction\n   */\n  getTokenAmount = async address => Numbers.fromDecimals(\n    await this.getContract().methods.balanceOf(address).call(),\n    this.getDecimals(),\n  );\n\n  /**\n   * @function\n   * @description Get Total Supply of Token\n   * @returns {Integer} Total supply\n   */\n  totalSupply = async () => Numbers.fromDecimals(\n    await this.getContract().methods.totalSupply().call(),\n    this.getDecimals(),\n  );\n\n  getABI() {\n    return this.params.contract;\n  }\n\n  /**\n   * @function\n   * @description Get Decimals of Token\n   * @returns {Integer} Total supply\n   */\n  getDecimals() {\n    return this.params.decimals;\n  }\n\n  getDecimalsAsync = async () => await this.getContract().methods.decimals().call();\n\n  /**\n   * @function\n   * @description Verify if Spender is Approved to use tokens\n   * @param {Object} params Parameters\n   * @param {Address} params.address Sender Address\n   * @param {Integer} params.amount Amount of Tokens\n   * @param {Address} params.spenderAddress Spender Address\n   * @returns {Bool} isApproved\n   */\n  isApproved = async ({ address, amount, spenderAddress }) => {\n    try {\n      const approvedAmount = Numbers.fromDecimals(\n        await this.getContract()\n          .methods.allowance(address, spenderAddress)\n          .call(),\n        this.getDecimals(),\n      );\n      return approvedAmount >= amount;\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  /**\n   * @function\n   * @description Approve tokens to be used by another address/contract\n   * @param {Object} params Parameters\n   * @param {Address} params.address Spender Address/Contract\n   * @param {Integer} params.amount Amount of Tokens\n   * @returns {Transaction} Transaction\n   */\n  approve = async ({ address, amount, callback }) => {\n    try {\n      const amountWithDecimals = Numbers.toSmartContractDecimals(\n        amount,\n        this.getDecimals(),\n      );\n      const res = await this.__sendTx(\n        this.params.contract\n          .getContract()\n          .methods.approve(address, amountWithDecimals),\n        null,\n        null,\n        callback,\n      );\n      return res;\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  /**\n   * @function\n   * @description Deploy ERC20 Token\n   * @param {Object} params Parameters\n   * @param {String} params.name Name of token\n   * @param {String} params.symbol Symbol of token\n   * @param {Integer} params.cap Max supply of Token (ex : 100M)\n   * @param {Address} params.distributionAddress Where tokens should be sent to initially\n   * @returns {Transaction} Transaction\n   */\n  deploy = async ({\n    name, symbol, cap, distributionAddress, callback,\n  }) => {\n    if (!distributionAddress) {\n      throw new Error('Please provide an Distribution address for distro');\n    }\n\n    if (!name) {\n      throw new Error('Please provide a name');\n    }\n\n    if (!symbol) {\n      throw new Error('Please provide a symbol');\n    }\n\n    if (!cap) {\n      throw new Error('Please provide a cap');\n    }\n    const params = [name, symbol, cap, distributionAddress];\n    const res = await this.__deploy(params, callback);\n    this.params.contractAddress = res.contractAddress;\n    /* Call to Backend API */\n    await this.__assert();\n    return res;\n  };\n}\n\nexport default ERC20Contract;\n","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/models/ERC20/ERC20TokenLock.js",["107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132"],"import _ from 'lodash';\nimport moment from 'moment';\nimport dayjs from 'dayjs';\nimport { tokenlock } from '../../interfaces';\nimport ERC20Contract from './ERC20Contract';\nimport IContract from '../IContract';\nimport Numbers from '../../utils/Numbers';\n\nconst assert = require('assert');\n\n/**\n * ERC20 Token Lock Contract Object\n * @class ERC20TokenLock\n * @param {Object} params\n * @param {Address} params.tokenAddress\n * @param {Address} params.contractAddress ? (opt)\n */\n\nclass ERC20TokenLock extends IContract {\n  constructor(params = {}) {\n    try {\n      super({ ...params, abi: tokenlock });\n      console.log(`ERC20TokenLock.ctor.tokenAddress: ${params.tokenAddress}`);\n      console.log(\n        `ERC20TokenLock.ctor.contractAddress: ${params.contractAddress}`,\n      );\n      if (params.tokenAddress) {\n        this.params.ERC20Contract = new ERC20Contract({\n          web3: params.web3,\n          contractAddress: params.tokenAddress,\n          acc: params.acc,\n        });\n      } else {\n        throw new Error(\"Please provide an ERC20 Address in 'tokenAddress'\");\n      }\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  /**\n   * @function\n   * @description Get ERC20 Address of the Token Contract managed\n   * @returns {Address}\n   */\n  async erc20() {\n    return await this.params.contract.getContract().methods.erc20().call();\n  }\n\n  /**\n   * @function\n   * @description Get Token Amount of ERC20 Address\n   * @param {Object} params\n   * @param {Address} params.address\n   * @returns {Integer} Token Amount\n   */\n  getTokenAmount = async ({ address }) => await this.getERC20Contract().getTokenAmount(address);\n\n  /**\n   * @function\n   * @description Get All Tokens staked/locked at that specific moment\n   * @returns {Integer} Token Amount\n   */\n  async totalAmountStaked() {\n    const res = await this.params.contract\n      .getContract()\n      .methods.totalAmountStaked()\n      .call();\n    return Numbers.fromDecimals(res, this.getERC20Contract().getDecimals());\n  }\n\n  /**\n   * @function\n   * @description Get minimum amount of tokens to lock per user\n   * @returns {Integer} Minimum Amount\n   */\n  async minAmountToLock() {\n    const res = await this.params.contract\n      .getContract()\n      .methods.minAmountToLock()\n      .call();\n    return Numbers.fromDecimals(res, this.getERC20Contract().getDecimals());\n  }\n\n  /**\n   * @function\n   * @description Get maximum amount of tokens to lock per user\n   * @returns {Integer} Maximum Amount\n   */\n  async maxAmountToLock() {\n    const res = await this.params.contract\n      .getContract()\n      .methods.maxAmountToLock()\n      .call();\n    return Numbers.fromDecimals(res, this.getERC20Contract().getDecimals());\n  }\n\n  /**\n   * @function\n   * @description Check if locked tokens release date has come and user can withdraw them\n   * @param {Object} params\n   * @param {Address} params.address\n   * @returns {Boolean} canRelease\n   */\n  canRelease = async ({ address }) => await this.params.contract.getContract().methods.canRelease(address).call();\n\n  /**\n   * @function\n   * @description Get locked tokens amount for a given address\n   * @param {Object} params\n   * @param {Address} params.address\n   * @returns {Integer} amount Locked token amount\n   */\n  getLockedTokens = async ({ address }) => {\n    const res = await this.params.contract\n      .getContract()\n      .methods.getLockedTokens(address)\n      .call();\n    return Numbers.fromDecimals(res, this.getERC20Contract().getDecimals());\n  };\n\n  /**\n   * @function\n   * @description Get locked tokens info for a given address\n   * @param {Object} params\n   * @param {Address} params.address\n   * @returns {Date} startDate\n   * @returns {Date} endDate\n   * @returns {Integer} amount Token amount\n   */\n  getLockedTokensInfo = async ({ address }) => {\n    const res = await this.params.contract\n      .getContract()\n      .methods.getLockedTokensInfo(address)\n      .call();\n\n    return {\n      startDate: Numbers.fromSmartContractTimeToMinutes(res[0]),\n      endDate: Numbers.fromSmartContractTimeToMinutes(res[1]),\n      amount: Numbers.fromDecimals(\n        res[2],\n        this.getERC20Contract().getDecimals(),\n      ),\n    };\n  };\n\n  /**\n   * @function\n   * @description Admin sets maximum amount of tokens to lock per user\n   * @param {Object} params\n   * @param {Address} params.tokenAmount Amount of Tokens\n   * @returns {Boolean} Success True if operation was successful\n   */\n  setMaxAmountToLock = async ({ tokenAmount }) => {\n    this.onlyOwner(); // verify that user is admin\n\n    /* Get Decimals of Amount */\n    const amountWithDecimals = Numbers.toSmartContractDecimals(\n      tokenAmount,\n      this.getERC20Contract().getDecimals(),\n    );\n\n    return await this.__sendTx(\n      this.params.contract\n        .getContract()\n        .methods.setMaxAmountToLock(amountWithDecimals),\n    );\n  };\n\n  /**\n   * @function\n   * @description Admin sets minimum amount of tokens to lock per user\n   * @param {Object} params\n   * @param {Integer} params.tokenAmount Minimum tokens amount\n   * @returns {Boolean} Success True if operation was successful\n   */\n  setMinAmountToLock = async ({ tokenAmount }) => {\n    this.onlyOwner(); // verify that user is admin\n\n    /* Get Decimals of Amount */\n    const amountWithDecimals = Numbers.toSmartContractDecimals(\n      tokenAmount,\n      this.getERC20Contract().getDecimals(),\n    );\n\n    return await this.__sendTx(\n      this.params.contract\n        .getContract()\n        .methods.setMinAmountToLock(amountWithDecimals),\n    );\n  };\n\n  /**\n   * @function\n   * @description User locks his tokens until specified end date.\n   * @param {Object} params\n   * @param {Address} params.address User Address\n   * @param {Integer} params.amount Tokens amount to be locked\n   * @param {Date} params.endDate Lock tokens until this end date\n   * @returns {Boolean} Success True if operation was successful\n   * REQUIREMENTS:\n   * user must have approved this contract to spend the tokens \"amount\" he wants to lock before calling this function.\n   */\n  lock = async ({ address, amount, endDate }) => {\n    // / 'address' is current user address\n\n    this.whenNotPaused(); // verify that contract is not paused\n\n    assert(\n      amount > 0\n        && amount >= (await this.minAmountToLock())\n        && amount <= (await this.maxAmountToLock()),\n      'Invalid token amount',\n    );\n    assert(endDate > moment(), 'Invalid end date');\n\n    // check if user can lock tokens\n    const lockedAmount = await this.getLockedTokens({ address });\n    assert(lockedAmount == 0, 'User already has locked tokens'); // otherwise user already locked tokens\n\n    /* Verify if transfer is approved for this amount */\n    const isApproved = await this.getERC20Contract().isApproved({\n      address,\n      amount,\n      spenderAddress: this.getAddress(),\n    });\n    if (!isApproved) {\n      throw new Error(\n        \"Has to Approve Token Transfer First, use the 'approve' Call\",\n      );\n    }\n    console.log('---lock.bp0');\n    return await this.__sendTx(\n      this.params.contract\n        .getContract()\n        .methods.lock(\n          Numbers.toSmartContractDecimals(\n            amount,\n            this.getERC20Contract().getDecimals(),\n          ),\n          Numbers.timeToSmartContractTime(endDate),\n        ),\n    );\n  };\n\n  /**\n   * @function\n   * @description User withdraws his locked tokens after specified end date\n   * @param {Object} params\n   * @param {Address} params.address User Address\n   * @return {Boolean} Success True if operation was successful\n   */\n  release = async ({ address }) => {\n    // / 'address' is current user address\n\n    // check if user has locked tokens and if he can unlock and withdraw them\n    const { startDate, endDate, amount } = await this.getLockedTokensInfo({\n      address,\n    });\n    const lockedAmount = amount;\n\n    assert(lockedAmount > 0, 'ERC20TokenLock.user has no locked tokens');\n    assert(\n      moment() >= endDate,\n      'ERC20TokenLock.tokens release date not reached',\n    );\n\n    return await this.__sendTx(\n      this.params.contract.getContract().methods.release(),\n    );\n  };\n\n  /**\n   * @function\n   * @description Approve this contract to transfer tokens of the ERC20 token contract on behalf of user\n   * @return {Boolean} Success True if operation was successful\n   */\n  approveERC20Transfer = async () => {\n    // let totalMaxAmount = await this.getERC20Contract().getTokenAmount(await this.getUserAddress());\n    const totalMaxAmount = await this.getERC20Contract().totalSupply();\n    return await this.getERC20Contract().approve({\n      address: this.getAddress(),\n      amount: Numbers.toSmartContractDecimals(\n        totalMaxAmount,\n        this.getERC20Contract().getDecimals(),\n      ),\n    });\n  };\n\n  __assert = async () => {\n    if (!this.getAddress()) {\n      throw new Error(\n        'Contract is not deployed, first deploy it and provide a contract address',\n      );\n    }\n\n    /* Use ABI */\n    this.params.contract.use(tokenlock, this.getAddress());\n\n    /* Set Token Address Contract for easy access */\n    if (!this.params.ERC20Contract) {\n      // console.log('---ERC20TokenLock.__assert.ERC20Contract null, creating new one');\n      this.params.ERC20Contract = new ERC20Contract({\n        web3: this.web3,\n        contractAddress: await this.erc20(),\n        acc: this.acc,\n      });\n    }\n    /* Assert Token Contract */\n    await this.params.ERC20Contract.__assert();\n  };\n\n  /**\n   * @function\n   * @description Deploy the ERC20 Token Lock Contract\n   */\n  deploy = async ({ callback } = {}) => {\n    if (!this.getERC20Contract()) {\n      throw new Error('No Token Address Provided');\n    }\n    const params = [this.getERC20Contract().getAddress()];\n\n    const res = await this.__deploy(params, callback);\n    this.params.contractAddress = res.contractAddress;\n    /* Call to Backend API */\n    await this.__assert();\n    return res;\n  };\n\n  getERC20Contract = () => this.params.ERC20Contract;\n}\n\nexport default ERC20TokenLock;\n","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/models/ERC721/ERC721Collectibles.js",["133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166"],"import _ from 'lodash';\nimport { erc721collectibles } from '../../interfaces';\nimport Numbers from '../../utils/Numbers';\nimport IContract from '../IContract';\nimport ERC20Contract from '../ERC20/ERC20Contract';\n\nconst baseFeeAddress = '0x6714d41094a264bb4b8fcb74713b42cfee6b4f74';\n\n/**\n * ERC721Contract Object\n * @class ERC721Collectibles\n * @param {Web3} web3\n * @param {Address} contractAddress ? (opt)\n */\n\nclass ERC721Collectibles extends IContract {\n  constructor(params = {}) {\n    super({ abi: erc721collectibles, ...params });\n  }\n\n  /**\n   * @private\n   */\n  __assert = async () => {\n    if (!this.getAddress()) {\n      throw new Error(\n        'Contract is not deployed, first deploy it and provide a contract address',\n      );\n    }\n    /* Use ABI */\n    this.params.contract.use(erc721collectibles, this.getAddress());\n\n    /* Set Token Address Contract for easy access */\n    this.params.ERC20Contract = new ERC20Contract({\n      web3: this.web3,\n      contractAddress: await this.purchaseToken(),\n      acc: this.acc,\n    });\n\n    /* Assert Token Contract */\n    await this.params.ERC20Contract.__assert();\n  };\n\n  /**\n   * @function\n   * @description Get ERC20 Address of the Contract\n   * @returns {Address}\n   */\n  async purchaseToken() {\n    return await this.params.contract\n      .getContract()\n      .methods._purchaseToken()\n      .call();\n  }\n\n  /**\n   * @function\n   * @description Get Price Per Pack\n   * @returns {Integer}\n   */\n  async getPricePerPack() {\n    return Numbers.fromDecimals(\n      await this.params.contract.getContract().methods._pricePerPack().call(),\n      18,\n    );\n  }\n\n  /**\n   * @function\n   * @description Verify if token ID exists\n   * @returns {Integer} Token Id\n   */\n  async exists({ tokenID }) {\n    return await this.params.contract\n      .getContract()\n      .methods.exists(tokenID)\n      .call();\n  }\n\n  /**\n   * @function\n   * @description Verify if it is limited\n   * @returns {Bool}\n   */\n  async isLimited() {\n    return await this.params.contract.getContract().methods._isLimited().call();\n  }\n\n  /**\n   * @function\n   * @description Verify what is the currentTokenId\n   * @returns {Integer} Current Token Id\n   */\n\n  async currentTokenId() {\n    return parseInt(\n      await this.params.contract.getContract().methods._currentTokenId().call(), 10,\n    );\n  }\n\n  /**\n   * @function\n   * @description Verify what is the getURITokenID\n   * @returns {String} URI\n   */\n  async getURITokenID({ tokenID }) {\n    return await this.params.contract\n      .getContract()\n      .methods.tokenURI(tokenID)\n      .call();\n  }\n\n  /**\n   * @function\n   * @description Verify what is the baseURI\n   * @returns {String} URI\n   */\n  async baseURI() {\n    return await this.params.contract.getContract().methods.baseURI().call();\n  }\n\n  /**\n   * @function\n   * @description Get Ids\n   * @param {Address} address\n   * @returns {Integer | Array} ids\n   */\n  async getRegisteredIDs({ address }) {\n    const res = await this.params.contract\n      .getContract()\n      .methods.getRegisteredIDs(address)\n      .call();\n\n    return res.map(r => parseInt(r, 10));\n  }\n\n  /**\n   * @function\n   * @description Verify if ID is registered\n   * @returns {Bool}\n   */\n  async isIDRegistered({ address, tokenID }) {\n    return await this.params.contract\n      .getContract()\n      .methods.registeredIDs(address, tokenID)\n      .call();\n  }\n\n  /**\n   * @function\n   * @description Verify what is the current price per Pack\n   * @returns {Integer} Price per pack in tokens\n   */\n\n  async pricePerPack() {\n    return Numbers.fromDecimals(\n      await this.params.contract.getContract().methods._pricePerPack().call(),\n      18,\n    );\n  }\n\n  /**\n   * @function\n   * @description Verify how much opened packs exist\n   * @returns {Integer} packs\n   */\n\n  async openedPacks() {\n    return parseInt(\n      await this.params.contract.getContract().methods._openedPacks().call(),\n      10,\n    );\n  }\n\n  /**\n   * @function\n   * @description Approve ERC20 Allowance\n   */\n  approveERC20 = async () => {\n    const totalMaxAmount = await this.getERC20Contract().totalSupply();\n    return await this.getERC20Contract().approve({\n      address: this.getAddress(),\n      amount: totalMaxAmount,\n    });\n  };\n\n  /**\n   * @function\n   * @description Set Base Token URI\n   */\n  setBaseTokenURI = async ({ URI }) => await this.__sendTx(\n    this.params.contract.getContract().methods.setBaseURI(URI),\n  );\n\n  /**\n   * @function\n   * @description Approve ERC20 Allowance\n   * @param {Address} address\n   * @param {Integer} amount\n   */\n  isApproved = async ({ address, amount }) => await this.getERC20Contract().isApproved({\n    address,\n    amount,\n    spenderAddress: this.getAddress(),\n  });\n\n  /**\n   * @function\n   * @description open Pack of tokens\n   * @param {Integer} amount Amount of packs to open\n   */\n  async openPack({ amount }) {\n    return await this.__sendTx(\n      this.params.contract.getContract().methods.openPack(amount),\n    );\n  }\n\n  /**\n   * @function\n   * @description Mint created TokenID\n   * @param {Address} to\n   * @param {Integer} tokenID\n   */\n  async mint({ tokenID }) {\n    return await this.__sendTx(\n      this.params.contract.getContract().methods.mint(tokenID),\n    );\n  }\n\n  /**\n   * @function\n   * @description set Purchase Token Address\n   * @param {Address} purchaseToken\n   */\n  async setPurchaseTokenAddress({ purchaseToken }) {\n    return await this.__sendTx(\n      this.params.contract\n        .getContract()\n        .methods.setPurchaseTokenAddress(purchaseToken),\n    );\n  }\n\n  /**\n   * @function\n   * @description set Stake Address\n   * @param {Address} purchaseToken\n   */\n  async setStakeAddress({ purchaseToken }) {\n    return await this.__sendTx(\n      this.params.contract.getContract().methods.setStakeAddress(purchaseToken),\n    );\n  }\n\n  /**\n   * @function\n   * @description set Fee Address\n   * @param {Address} purchaseToken\n   */\n  async setSwapBackAddress({ purchaseToken }) {\n    return await this.__sendTx(\n      this.params.contract\n        .getContract()\n        .methods.setSwapBackAddress(purchaseToken),\n    );\n  }\n\n  /**\n   * @function\n   * @description set Fee Address\n   * @param {Address} purchaseToken\n   */\n  async setFeeAddress({ purchaseToken }) {\n    return await this.__sendTx(\n      this.params.contract.getContract().methods.setFeeAddress(purchaseToken),\n    );\n  }\n\n  /**\n   * @function\n   * @description set Price per Pack\n   * @param {Amount} newPrice\n   */\n  async setPricePerPack({ newPrice }) {\n    const newPriceWithDecimals = Numbers.toSmartContractDecimals(newPrice, 18);\n    return await this.__sendTx(\n      this.params.contract\n        .getContract()\n        .methods.setPricePerPack(newPriceWithDecimals),\n    );\n  }\n\n  deploy = async ({\n    name,\n    symbol,\n    limitedAmount = 0,\n    erc20Purchase,\n    feeAddress = '0x0000000000000000000000000000000000000001',\n    otherAddress = '0x0000000000000000000000000000000000000001',\n    callback,\n  }) => {\n    if (!erc20Purchase) {\n      throw new Error('Please provide an erc20 address for purchases');\n    }\n\n    if (!name) {\n      throw new Error('Please provide a name');\n    }\n\n    if (!symbol) {\n      throw new Error('Please provide a symbol');\n    }\n    const params = [\n      name,\n      symbol,\n      limitedAmount,\n      erc20Purchase,\n      baseFeeAddress,\n      feeAddress,\n      otherAddress,\n    ];\n    const res = await this.__deploy(params, callback);\n    this.params.contractAddress = res.contractAddress;\n    /* Call to Backend API */\n    await this.__assert();\n    return res;\n  };\n\n  getERC20Contract = () => this.params.ERC20Contract;\n}\n\nexport default ERC721Collectibles;\n","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/models/ERC721/ERC721Standard.js",["167","168","169","170","171","172","173","174","175","176","177","178"],"import _ from 'lodash';\nimport { erc721standard } from '../../interfaces';\nimport IContract from '../IContract';\nimport ERC20Contract from '../ERC20/ERC20Contract';\n/**\n * ERC721Contract Object\n * @class ERC721Contract\n * @param {Web3} web3\n * @param {Address} contractAddress ? (opt)\n */\n\nclass ERC721Standard extends IContract {\n  constructor(params = {}) {\n    super({ abi: erc721standard, ...params });\n  }\n\n  __assert = async () => {\n    if (!this.getAddress()) {\n      throw new Error(\n        'Contract is not deployed, first deploy it and provide a contract address',\n      );\n    }\n    /* Use ABI */\n    this.params.contract.use(erc721collectibles, this.getAddress());\n\n    /* Set Token Address Contract for easy access */\n    this.params.ERC20Contract = new ERC20Contract({\n      web3: this.web3,\n      contractAddress: await this.purchaseToken(),\n      acc: this.acc,\n    });\n\n    /* Assert Token Contract */\n    await this.params.ERC20Contract.__assert();\n  };\n\n  /**\n   * @function\n   * @description Verify if token ID exists\n   * @returns {Integer} Token Id\n   */\n  async exists({ tokenID }) {\n    return await this.params.contract\n      .getContract()\n      .methods.exists(tokenID)\n      .call();\n  }\n\n  /**\n   * @function\n   * @description Verify what is the getURITokenID\n   * @returns {String} URI\n   */\n  async getURITokenID({ tokenID }) {\n    return await this.params.contract\n      .getContract()\n      .methods.tokenURI(tokenID)\n      .call();\n  }\n\n  /**\n   * @function\n   * @description Verify what is the baseURI\n   * @returns {String} URI\n   */\n  async baseURI() {\n    return await this.params.contract.getContract().methods.baseURI().call();\n  }\n\n  /**\n   * @function\n   * @description Set Base Token URI\n   */\n  setBaseTokenURI = async ({ URI }) => await this.__sendTx(\n    this.params.contract.getContract().methods.setBaseURI(URI),\n  );\n\n  /**\n   * @function\n   * @description Mint created TokenID\n   * @param {Address} to\n   * @param {Integer} tokenID\n   */\n  async mint({ tokenID }) {\n    return await this.__sendTx(\n      this.params.contract.getContract().methods.mint(tokenID),\n    );\n  }\n\n  deploy = async ({ name, symbol, callback }) => {\n    if (!name) {\n      throw new Error('Please provide a name');\n    }\n\n    if (!symbol) {\n      throw new Error('Please provide a symbol');\n    }\n    const params = [name, symbol];\n    const res = await this.__deploy(params, callback);\n    this.params.contractAddress = res.contractAddress;\n    /* Call to Backend API */\n    await this.__assert();\n    return res;\n  };\n\n  getERC20Contract = () => this.params.ERC20Contract;\n}\n\nexport default ERC721Standard;\n","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/models/IContract.js",["179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201"],"import _ from 'lodash';\nimport Contract from '../utils/Contract';\n\n/**\n * Contract Object Interface\n * @class IContract\n * @param {Web3} web3\n * @param {Address} contractAddress ? (opt)\n * @param {ABI} abi\n * @param {Account} acc ? (opt)\n */\n\nclass IContract {\n  constructor({\n    web3,\n    contractAddress = null /* If not deployed */,\n    abi,\n    acc,\n  }) {\n    try {\n      if (!abi) {\n        throw new Error('No ABI Interface provided');\n      }\n      if (!web3) {\n        throw new Error('Please provide a valid web3 provider');\n      }\n\n      this.web3 = web3;\n\n      if (acc) {\n        this.acc = acc;\n      }\n      this.params = {\n        web3,\n        abi,\n        contractAddress,\n        contract: new Contract(web3, abi, contractAddress),\n      };\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  __init__ = async () => {\n    try {\n      if (!this.getAddress()) {\n        throw new Error('Please add a Contract Address');\n      }\n\n      await this.__assert();\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  __metamaskCall = async ({\n    f, acc, value, callback = () => {},\n  }) => new Promise((resolve, reject) => {\n    f.send({\n      from: acc,\n      value,\n      gasPrice: 20000000000, // temp test\n      gas: 5913388, // 6721975 //temp test\n    })\n      .on('confirmation', (confirmationNumber, receipt) => {\n        callback(confirmationNumber);\n        if (confirmationNumber > 0) {\n          resolve(receipt);\n        }\n      })\n      .on('error', (err) => {\n        reject(err);\n      });\n  });\n\n  __sendTx = async (f, call = false, value, callback = () => {}) => {\n    try {\n      let res;\n      if (!this.acc && !call) {\n        const accounts = await this.params.web3.eth.getAccounts();\n        console.log('---__sendTx.bp0');\n        res = await this.__metamaskCall({\n          f,\n          acc: accounts[0],\n          value,\n          callback,\n        });\n      } else if (this.acc && !call) {\n        const data = f.encodeABI();\n        res = await this.params.contract\n          .send(this.acc.getAccount(), data, value)\n          .catch((err) => {\n            throw err;\n          });\n      } else if (this.acc && call) {\n        res = await f.call({ from: this.acc.getAddress() }).catch((err) => {\n          throw err;\n        });\n      } else {\n        res = await f.call().catch((err) => {\n          throw err;\n        });\n      }\n      return res;\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  __deploy = async (params, callback) => await this.params.contract.deploy(\n    this.acc,\n    this.params.contract.getABI(),\n    this.params.contract.getJSON().bytecode,\n    params,\n    callback,\n  );\n\n  __assert = async () => {\n    if (!this.getAddress()) {\n      throw new Error(\n        'Contract is not deployed, first deploy it and provide a contract address',\n      );\n    }\n    /* Use ABI */\n    this.params.contract.use(this.params.abi, this.getAddress());\n  };\n\n  /**\n   * @function\n   * @description Deploy the Contract\n   */\n  deploy = async ({ callback }) => {\n    const params = [];\n    const res = await this.__deploy(params, callback);\n    this.params.contractAddress = res.contractAddress;\n    /* Call to Backend API */\n    await this.__assert();\n    return res;\n  };\n\n  /**\n   * @function\n   * @description Set New Owner of the Contract\n   * @param {string} address\n   */\n  async setNewOwner({ address }) {\n    return await this.__sendTx(\n      this.params.contract.getContract().methods.transferOwnership(address),\n    );\n  }\n\n  /**\n   * @function\n   * @description Get Owner of the Contract\n   * @returns {string} address\n   */\n  async owner() {\n    return await this.params.contract.getContract().methods.owner().call();\n  }\n\n  /**\n   * @function\n   * @description Get Owner of the Contract\n   * @returns {boolean}\n   */\n  async isPaused() {\n    return await this.params.contract.getContract().methods.paused().call();\n  }\n\n  /**\n   * @function\n   * @type admin\n   * @description Pause Contract\n   */\n  async pauseContract() {\n    return await this.__sendTx(\n      this.params.contract.getContract().methods.pause(),\n    );\n  }\n\n  /**\n   * @function\n   * @type admin\n   * @description Unpause Contract\n   */\n  async unpauseContract() {\n    return await this.__sendTx(\n      this.params.contract.getContract().methods.unpause(),\n    );\n  }\n\n  /* Optional */\n\n  /**\n   * @function\n   * @description Remove Tokens from other ERC20 Address (in case of accident)\n   * @param {Address} tokenAddress\n   * @param {Address} toAddress\n   */\n  async removeOtherERC20Tokens({ tokenAddress, toAddress }) {\n    return await this.__sendTx(\n      this.params.contract\n        .getContract()\n        .methods.removeOtherERC20Tokens(tokenAddress, toAddress),\n    );\n  }\n\n  /**\n   * @function\n   * @description Remove all tokens for the sake of bug or problem in the smart contract, contract has to be paused first, only Admin\n   * @param {Address} toAddress\n   */\n  async safeGuardAllTokens({ toAddress }) {\n    return await this.__sendTx(\n      this.params.contract.getContract().methods.safeGuardAllTokens(toAddress),\n    );\n  }\n\n  /**\n   * @function\n   * @description Change Token Address of Application\n   * @param {Address} newTokenAddress\n   */\n  async changeTokenAddress({ newTokenAddress }) {\n    return await this.__sendTx(\n      this.params.contract\n        .getContract()\n        .methods.changeTokenAddress(newTokenAddress),\n    );\n  }\n\n  /**\n   * @function\n   * @description Get Balance of Contract\n   * @param {Integer} Balance\n   */\n  getAddress() {\n    return this.params.contractAddress;\n  }\n\n  /**\n   * @function\n   * @description Get Balance of Contract\n   * @param {Integer} Balance\n   */\n  async getBalance() {\n    const wei = await this.web3.eth.getBalance(this.getAddress());\n    return this.web3.utils.fromWei(wei, 'ether');\n  }\n\n  /**\n   * @function\n   * @description Get contract current user/sender address\n   * @param {Address} User address\n   */\n  async getUserAddress() {\n    if (this.acc) return this.acc.getAddress();\n\n    const accounts = await this.params.web3.eth.getAccounts();\n    return accounts[0];\n  }\n\n  /**\n   * @function\n   * @description Verify that current user/sender is admin, throws an error otherwise\n   * @throws {Error}\n   */\n  async onlyOwner() {\n    /* Verify that sender is admin */\n    const adminAddress = await this.owner();\n    const userAddress = await this.getUserAddress();\n    const isAdmin = adminAddress === userAddress;\n    if (!isAdmin) {\n      throw new Error('Only admin can perform this operation');\n    }\n  }\n\n  /**\n   * @function\n   * @description Verify that contract is not paused before sending a transaction, throws an error otherwise\n   * @throws {Error}\n   */\n  async whenNotPaused() {\n    /* Verify that contract is not paused */\n    const paused = await this.isPaused();\n    if (paused) {\n      throw new Error('Contract is paused');\n    }\n  }\n}\n\nexport default IContract;\n","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/models/PredictionMarkets/ExchangeContract.js",["202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265"],"import _ from 'lodash';\nimport { exchange } from '../../interfaces';\nimport Numbers from '../../utils/Numbers';\nimport IContract from '../IContract';\n\n/**\n * Exchange Contract Object\n * @class ExchangeContract\n * @param {Web3} web3\n * @param {Address} tokenAddress\n * @param {Integer} decimals\n * @param {Address} contractAddress ? (opt)\n */\n\nclass ExchangeContract extends IContract {\n  constructor(params) {\n    super({ abi: exchange, ...params });\n  }\n\n  /* Get Functions */\n  /**\n   * @function\n   * @description Get Events\n   * @returns {Integer | Array} Get Events ID\n   */\n  async getEvents() {\n    const res = await this.params.contract\n      .getContract()\n      .methods.getEvents()\n      .call();\n    return res.map(id => Numbers.fromHex(id));\n  }\n\n  /**\n   * @function\n   * @description Get Events\n   * @returns {Integer | Array} Get Events ID\n   */\n  async getMyEvents() {\n    const res = await this.__sendTx(\n      this.params.contract.getContract().methods.getMyEvents(),\n      true,\n    );\n    return res.map(id => Numbers.fromHex(id));\n  }\n\n  /**\n   * @function\n   * @description Get EventData\n   * @param {Integer} event_id\n   * @returns {String} Event Name\n   * @returns {Integer} Result Id\n   * @returns {String} URL Oracle\n   * @returns {Boolean} Is Resolved\n   */\n  async getEventData({ event_id }) {\n    const r = await this.__sendTx(\n      this.params.contract.getContract().methods.getEventData(event_id),\n      true,\n    );\n\n    return {\n      name: r[0],\n      _resultId: Numbers.fromHex(r[1]),\n      urlOracle: r[2],\n      isResolved: r[3],\n    };\n  }\n\n  /**\n   * @function\n   * @description Get My Event Holdings\n   * @param {Integer} event_id\n   * @returns {Integer} 1 In Pool Balances\n   * @returns {Integer} 1 Out Pool Balances\n   * @returns {Integer} 1 Liquidity Balances\n   * @returns {Integer} 2 In Pool Balances\n   * @returns {Integer} 2 Out Pool Balances\n   * @returns {Integer} 2 Liquidity Balances\n   */\n\n  async getMyEventHoldings({ event_id }) {\n    const r = await this.__sendTx(\n      this.params.contract.getContract().methods.getMyEventHoldings(event_id),\n      true,\n    );\n\n    return {\n      inPoolBalancesA: r[0],\n      outPoolBalancesA: r[1],\n      liquidityA: r[2],\n      inPoolBalancesB: r[3],\n      outPoolBalancesB: r[4],\n      liquidityB: r[5],\n    };\n  }\n\n  /**\n   * @function\n   * @description Get Result Space Data\n   * @param {Integer} event_id\n   * @param {Integer} resultSpace_id\n   * @returns {Integer} _id\n   * @returns {Integer} _resultId\n   * @returns {Integer} pool\n   * @returns {Integer} cost\n   * @returns {Integer} odd\n   * @returns {Integer} amount\n   * @returns {Integer} inPool\n   * @returns {Integer} outPool\n   * @returns {Integer} fees\n   * @returns {Integer} liqAmount\n   */\n\n  async getResultSpaceData({ event_id, resultSpace_id }) {\n    const r = await this.__sendTx(\n      this.params.contract\n        .getContract()\n        .methods.getResultSpaceData(event_id, resultSpace_id),\n      true,\n    );\n\n    return {\n      _id: Numbers.fromHex(r[0]),\n      _resultId: Numbers.fromHex(r[1]),\n      pool: Numbers.fromDecimals(r[2], 18),\n      cost: Numbers.fromDecimals(r[3], 7),\n      odd: Numbers.fromDecimals(r[4], 4),\n      amount: Numbers.fromDecimals(r[5], 7),\n      inPool: Numbers.fromDecimals(r[6], 7),\n      outPool: Numbers.fromDecimals(r[7], 7),\n      fees: Numbers.fromDecimals(r[8], 7),\n      liqAmount: Numbers.fromDecimals(r[9], 7),\n    };\n  }\n\n  /**\n   * @function\n   * @description To see if Event is open\n   * @returns {Boolean}\n   */\n  async isEventOpen() {\n    return await this.params.contract\n      .getContract()\n      .methods.isEventOpen()\n      .call();\n  }\n\n  /**\n   * @function\n   * @description Get Fractions Cost\n   * @param {Integer} event_id\n   * @param {Integer} resultSpace_id\n   * @param {Integer} fractions_amount\n   * @return {Integer} cost\n   */\n\n  async getFractionsCost({ event_id, resultSpace_id, fractions_amount }) {\n    return Numbers.fromDecimals(\n      await this.__sendTx(\n        this.params.contract\n          .getContract()\n          .methods.getFractionsCost(event_id, resultSpace_id, fractions_amount),\n        true,\n      ),\n      18,\n    );\n  }\n\n  /**\n   * @function\n   * @description Get Slipage on Buy\n   * @param {Integer} event_id\n   * @param {Integer} resultSpace_id\n   * @param {Integer} fractions_amount\n   * @returns {Integer} _id\n   */\n  async getSlipageOnBuy({ event_id, resultSpace_id, fractions_amount }) {\n    return await this.params.contract\n      .getContract()\n      .methods.getSlipageOnBuy(event_id, resultSpace_id, fractions_amount)\n      .call();\n  }\n\n  /**\n   * @function\n   * @description Get Slipage on Sell\n   * @param {Integer} event_id\n   * @param {Integer} resultSpace_id\n   * @param {Integer} fractions_amount\n   * @returns {Integer} _id\n   */\n  async getSlipageOnSell({ event_id, resultSpace_id, fractions_amount }) {\n    return await this.params.contract\n      .getContract()\n      .methods.getSlipageOnSell(event_id, resultSpace_id, fractions_amount)\n      .call();\n  }\n\n  /* POST User Functions */\n\n  /**\n   * @function\n   * @description Create an Event\n   * @param {Integer | Array} _resultSpaceIds\n   * @param {String} urlOracle\n   * @param {String} eventName\n\n   */\n\n  createEvent = async ({\n    resultSpaceIds,\n    urlOracle,\n    eventName,\n    ethAmount = 0,\n  }) => {\n    if (ethAmount == 0) {\n      throw new Error('Eth Amount has to be > 0');\n    }\n    const ETHToWei = Numbers.toSmartContractDecimals(ethAmount, 18);\n    return await this.__sendTx(\n      this.params.contract\n        .getContract()\n        .methods.createEvent(resultSpaceIds, urlOracle, eventName),\n      false,\n      ETHToWei,\n    );\n  };\n\n  /**\n   * @function\n   * @description Resolve Event\n   * @param {Integer} event_id\n   * @param {Integer} resultSpace_id\n\n   */\n\n  resolveEvent = async ({ event_id, resultSpace_id }) => await this.__sendTx(\n    this.params.contract\n      .getContract()\n      .methods.resolveEvent(event_id, resultSpace_id),\n  );\n\n  /**\n   * @function\n   * @description Add Liquidity\n   * @param {Integer} eventId\n   */\n\n  addLiquidity = async ({ event_id, ethAmount }) => {\n    const ETHToWei = Numbers.toSmartContractDecimals(ethAmount, 18);\n    return await this.__sendTx(\n      this.params.contract.getContract().methods.addLiquidity(event_id),\n      false,\n      ETHToWei,\n    );\n  };\n\n  /**\n   * @function\n   * @description Remove Liquidity\n   * @param {Integer} eventId\n   */\n\n  removeLiquidity = async ({ event_id }) => await this.__sendTx(\n    this.params.contract.getContract().methods.removeLiquidity(event_id),\n  );\n\n  /**\n   * @function\n   * @description Buy Fractions\n   * @param {Integer} event_id\n   * @param {Integer} resultSpace_id\n   * @param {Integer} fractions_amount\n   */\n\n  buy = async ({ event_id, resultSpace_id, fractions_amount }) => {\n    // eslint-disable-next-line no-param-reassign\n    fractions_amount = Numbers.toSmartContractDecimals(fractions_amount, 7);\n    const ETHCost = await this.getFractionsCost({\n      event_id,\n      resultSpace_id,\n      fractions_amount,\n    });\n    const ETHToWei = Numbers.toSmartContractDecimals(ETHCost, 18);\n    return await this.__sendTx(\n      this.params.contract\n        .getContract()\n        .methods.buy(event_id, resultSpace_id, fractions_amount),\n      false,\n      ETHToWei,\n    );\n  };\n\n  /**\n   * @function\n   * @description Sell Fractions\n   * @param {Integer} event_id\n   * @param {Integer} resultSpace_id\n   * @param {Integer} fractions_amount\n   */\n\n  sell = async ({ event_id, resultSpace_id, fractions_amount }) => await this.__sendTx(\n    this.params.contract\n      .getContract()\n      .methods.sell(event_id, resultSpace_id, fractions_amount),\n  );\n\n  /**\n   * @function\n   * @description Take Fractions out of the pool\n   * @param {Integer} event_id\n   * @param {Integer} resultSpace_id\n   * @param {Integer} fractions_amount\n   */\n\n  pullFractions = async ({ event_id, resultSpace_id, fractions_amount }) => await this.__sendTx(\n    this.params.contract\n      .getContract()\n      .methods.pullFractions(event_id, resultSpaceId, fractions_amount),\n  );\n\n  /**\n   * @function\n   * @description Move Fractions to the Pool\n   * @param {Integer} eventId\n   * @param {Integer} resultSpace_id\n   * @param {Integer} fractions_amount\n   */\n\n  pushFractions = async ({ event_id, resultSpace_id, fractions_amount }) => await this.__sendTx(\n    this.params.contract\n      .getContract()\n      .methods.pushFractions(event_id, resultSpace_id, fractions_amount),\n  );\n\n  /**\n   * @function\n   * @description Withdraw Wins on end of Event\n   * @param {Integer} event_id\n   * @param {Integer} resultSpace_id\n   */\n\n  withdrawWins = async ({ event_id, resultSpace_id }) => await this.__sendTx(\n    this.params.contract\n      .getContract()\n      .methods.withdrawWins(event_id, resultSpace_id),\n  );\n\n  /**\n  * @function\n  * @description Deploy the Pool Contract\n\n  */\n  deploy = async ({ callback }) => {\n    const params = [];\n    const res = await this.__deploy(params, callback);\n    this.params.contractAddress = res.contractAddress;\n    /* Call to Backend API */\n    this.__assert();\n    return res;\n  };\n}\n\nexport default ExchangeContract;\n","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/models/Staking/StakingContract.js",["266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297"],"import _ from 'lodash';\nimport { staking } from '../../interfaces';\nimport ERC20Contract from '../ERC20/ERC20Contract';\nimport IContract from '../IContract';\nimport Numbers from '../../utils/Numbers';\n\n/**\n * Staking Contract Object\n * @class StakingContract\n * @param {Object} params\n * @param {Address} params.tokenAddress\n */\n\nclass StakingContract extends IContract {\n  constructor(params = {}) {\n    try {\n      super({ ...params, abi: staking });\n      if (params.tokenAddress) {\n        this.params.ERC20Contract = new ERC20Contract({\n          web3: params.web3,\n          contractAddress: params.tokenAddress,\n          acc: params.acc,\n        });\n      }\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  /**\n   * @function\n   * @description Get ERC20 Address of the Contract\n   * @returns {Address}\n   */\n  async erc20() {\n    return await this.__sendTx(\n      this.params.contract.getContract().methods.erc20(),\n      true,\n    );\n  }\n\n  /**\n   * @function\n   * @description Get Token Amount of ERC20 Address\n   * @returns {Address}\n   */\n  getTokenAmount = async ({ address }) => await this.getERC20Contract().getTokenAmount(address);\n\n  /**\n   * @function\n   * @description Get All Tokens Locked for the APR\n   * @returns {Integer}\n   */\n  async futureLockedTokens() {\n    const res = await this.__sendTx(\n      this.params.contract.getContract().methods.futureLockedTokens(),\n      true,\n    );\n    return Numbers.fromDecimals(res, this.getERC20Contract().getDecimals());\n  }\n\n  /**\n   * @function\n   * @description Get All Tokens Available for the Subscription Amount\n   * @returns {Integer}\n   */\n  async availableTokens() {\n    const res = await this.__sendTx(\n      this.params.contract.getContract().methods.availableTokens(),\n      true,\n    );\n    return Numbers.fromDecimals(res, this.getERC20Contract().getDecimals());\n  }\n\n  /**\n   * @function\n   * @description Get All Tokens Held in Stake at that specific moment\n   * @returns {Integer}\n   */\n  async heldTokens() {\n    const res = await this.__sendTx(\n      this.params.contract.getContract().methods.heldTokens(),\n      true,\n    );\n    return Numbers.fromDecimals(res, this.getERC20Contract().getDecimals());\n  }\n\n  /**\n   * @function\n   * @description Get APR Amount based on amount of timestamp, amount and APR of that product\n   * @param {Integer} APR\n   * @param {Date} startDate\n   * @param {Date} endDate\n   * @param {Integer} amount Token Amount\n   * @returns {Integer}\n   */\n  getAPRAmount = async ({\n    APR, startDate, endDate, amount,\n  }) => {\n    const res = await this.__sendTx(\n      this.params.contract\n        .getContract()\n        .methods.getAPRAmount(\n          APR,\n          Numbers.timeToSmartContractTime(startDate),\n          Numbers.timeToSmartContractTime(endDate),\n          Numbers.toSmartContractDecimals(\n            amount,\n            this.getERC20Contract().getDecimals(),\n          ),\n        ),\n      true,\n    );\n    return Numbers.fromDecimals(res, this.getERC20Contract().getDecimals());\n  };\n  /**\n   * @function\n   * @description createProduct\n   * @param {Date} startDate\n   * @param {Date} endDate\n   * @param {Integer} totalMaxAmount\n   * @param {Integer} individualMinimumAmount\n   * @param {Integer} APR\n   * @param {Boolean} lockedUntilFinalization\n   */\n\n  async createProduct({\n    startDate,\n    endDate,\n    totalMaxAmount,\n    individualMinimumAmount,\n    APR,\n    lockedUntilFinalization,\n  }) {\n    return await this.__sendTx(\n      this.params.contract\n        .getContract()\n        .methods.createProduct(\n          Numbers.timeToSmartContractTime(startDate),\n          Numbers.timeToSmartContractTime(endDate),\n          Numbers.toSmartContractDecimals(\n            totalMaxAmount,\n            this.getERC20Contract().getDecimals(),\n          ),\n          Numbers.toSmartContractDecimals(\n            individualMinimumAmount,\n            this.getERC20Contract().getDecimals(),\n          ),\n          APR,\n          lockedUntilFinalization,\n        ),\n    );\n  }\n\n  /**\n   * @function\n   * @description Get All Available Products\n   * @returns {Array | Integer} ids\n   */\n  getProducts = async () => await this.__sendTx(\n    this.params.contract.getContract().methods.getProductIds(),\n    true,\n  );\n\n  /**\n   * @function\n   * @description Get Subscription from product\n   * @param {Integer} product_id\n   * @returns {Date} createdAt\n   * @returns {Date} startDate\n   * @returns {Date} endDate\n   * @returns {Integer} totalMaxAmount\n   * @returns {Integer} individualMinimumAmount\n   * @returns {Integer} APR\n   * @returns {Integer} currentAmount\n   * @returns {Boolean} lockedUntilFinalization\n   * @returns {Array | Address} subscribers\n   * @returns {Array | Integer} subscriptionIds\n   */\n  getProduct = async ({ product_id }) => {\n    const res = await this.__sendTx(\n      this.params.contract.getContract().methods.getProduct(product_id),\n      true,\n    );\n\n    return {\n      _id: product_id,\n      createdAt: Numbers.fromSmartContractTimeToMinutes(res[0]),\n      startDate: Numbers.fromSmartContractTimeToMinutes(res[1]),\n      endDate: Numbers.fromSmartContractTimeToMinutes(res[2]),\n      totalMaxAmount: Numbers.fromDecimals(\n        res[3],\n        this.getERC20Contract().getDecimals(),\n      ),\n      individualMinimumAmount: Numbers.fromDecimals(\n        res[4],\n        this.getERC20Contract().getDecimals(),\n      ),\n      APR: parseInt(res[5], 10),\n      currentAmount: Numbers.fromDecimals(\n        res[6],\n        this.getERC20Contract().getDecimals(),\n      ),\n      lockedUntilFinalization: res[7],\n      subscribers: res[8],\n      subscriptionIds: Numbers.fromExponential(res[9]),\n    };\n  };\n\n  /**\n   * @function\n   * @description Approve ERC20 Allowance for Transfer for Subscribe Product\n   */\n  approveERC20Transfer = async () => {\n    const totalMaxAmount = await this.getERC20Contract().totalSupply();\n    return await this.getERC20Contract().approve({\n      address: this.getAddress(),\n      amount: Numbers.toSmartContractDecimals(\n        totalMaxAmount,\n        this.getERC20Contract().getDecimals(),\n      ),\n    });\n  };\n\n  /**\n   * @function\n   * @description Subscribe to a product Staking\n   * @param {Integer} product_id\n   * @param {Integer} amount\n   * @returns {Boolean} Success\n   */\n  subscribeProduct = async ({ address, product_id, amount }) => {\n    /* Get Decimals of Amount */\n    const amountWithDecimals = Numbers.toSmartContractDecimals(\n      amount,\n      this.getERC20Contract().getDecimals(),\n    );\n    /* Verify if transfer is approved for this amount */\n    const isApproved = await this.getERC20Contract().isApproved({\n      address,\n      amount,\n      spenderAddress: this.getAddress(),\n    });\n    if (!isApproved) {\n      throw new Error(\n        \"Has to Approve Token Transfer First, use the 'approve' Call\",\n      );\n    }\n\n    return await this.__sendTx(\n      this.params.contract\n        .getContract()\n        .methods.subscribeProduct(product_id, amountWithDecimals),\n    );\n  };\n\n  /**\n   * @function\n   * @description Get Subscription from product\n   * @param {Integer} product_id\n   * @param {Integer} subscription_id\n   * @returns {Integer} _id\n   * @returns {Integer} productId\n   * @returns {Date} startDate\n   * @returns {Date} endDate\n   * @returns {Address} subscriberAddress\n   * @returns {Integer} APR\n   * @returns {Boolean} finalized\n   */\n  getSubscription = async ({ subscription_id, product_id }) => {\n    const res = await this.__sendTx(\n      this.params.contract\n        .getContract()\n        .methods.getSubscription(subscription_id, product_id),\n      true,\n    );\n\n    return {\n      _id: Numbers.fromExponential(res[0]),\n      productId: Numbers.fromExponential(res[1]),\n      startDate: Numbers.fromSmartContractTimeToMinutes(res[2]),\n      endDate: Numbers.fromSmartContractTimeToMinutes(res[3]),\n      amount: Numbers.fromDecimals(\n        res[4],\n        this.getERC20Contract().getDecimals(),\n      ),\n      subscriberAddress: res[5],\n      APR: parseInt(res[6], 10),\n      finalized: res[7],\n      withdrawAmount: Numbers.fromDecimals(\n        res[8],\n        this.getERC20Contract().getDecimals(),\n      ),\n    };\n  };\n\n  /**\n   * @function\n   * @description Withdraw Subscription to a product Staking\n   * @param {Integer} product_id\n   * @param {Integer} subscription_id\n   */\n  withdrawSubscription = async ({ product_id, subscription_id }) => await this.__sendTx(\n    this.params.contract\n      .getContract()\n      .methods.withdrawSubscription(product_id, subscription_id),\n  );\n\n  /**\n   * @function\n   * @description Get Subscriptions by Address\n   * @param {Address} address\n   * @returns {Array | Integer} subscriptions_ids\n   */\n  getSubscriptionsByAddress = async ({ address }) => {\n    const res = await this.__sendTx(\n      this.params.contract.getContract().methods.getMySubscriptions(address),\n      true,\n    );\n    return res.map(r => Numbers.fromExponential(r));\n  };\n\n  /**\n   * @function\n   * @description Get All Subscriptions done\n   * @returns {Array | Subscription} subscriptions\n   */\n  getAllSubscriptions = async () => {\n    /* Get All Products */\n    const products = await this.getProducts();\n\n    /* Get All Subscriptions */\n    const subscriptions = await Promise.all(\n      products.map(async (product) => {\n        const productObj = await this.getProduct({\n          product_id: product,\n        });\n        return await Promise.all(\n          productObj.subscriptionIds.map(async subscription_id => this.getSubscription({\n            subscription_id,\n            product_id: product,\n          })),\n        );\n      }),\n    );\n    return subscriptions ? _.flatten(subscriptions) : [];\n  };\n\n  /**\n   * @function\n   * @description Transfer Tokens by the Admin to ensure APR Amount\n   * @param {Integer} amount\n   */\n  async depositAPRTokensByAdmin({ amount }) {\n    return await this.getERC20Contract().transferTokenAmount({\n      toAddress: this.getAddress(),\n      tokenAmount: amount,\n    });\n  }\n\n  /**\n   * @function\n   * @description Get Total Amount of tokens needed to be deposited by Admin to ensure APR for all available Products\n   * @return {Integer} Amount\n   */\n  getTotalNeededTokensForAPRbyAdmin = async () => {\n    const products = await this.getProducts();\n\n    const allProducts = await Promise.all(\n      products.map(async (product) => {\n        const productObj = await this.getProduct({\n          product_id: product,\n        });\n        const res = await this.getAPRAmount({\n          APR: productObj.APR,\n          startDate: productObj.startDate,\n          endDate: productObj.endDate,\n          amount: productObj.totalMaxAmount,\n        });\n        return parseFloat(res);\n      }),\n    );\n    return Numbers.fromExponential(\n      allProducts.reduce((a, b) => a + b, 0),\n    ).toString();\n  };\n\n  /**\n   * @override\n   */\n  __assert = async () => {\n    if (!this.getAddress()) {\n      throw new Error(\n        'Contract is not deployed, first deploy it and provide a contract address',\n      );\n    }\n\n    /* Use ABI */\n    this.params.contract.use(staking, this.getAddress());\n\n    /* Set Token Address Contract for easy access */\n    this.params.ERC20Contract = new ERC20Contract({\n      web3: this.web3,\n      contractAddress: await this.erc20(),\n      acc: this.acc,\n    });\n\n    /* Assert Token Contract */\n    await this.params.ERC20Contract.__assert();\n  };\n\n  /**\n   * @function\n   * @override\n   * @description Deploy the Staking Contract\n   */\n  deploy = async ({ callback } = {}) => {\n    if (!this.getERC20Contract()) {\n      throw new Error('No Token Address Provided');\n    }\n    const params = [this.getERC20Contract().getAddress()];\n    const res = await this.__deploy(params, callback);\n    this.params.contractAddress = res.contractAddress;\n    /* Call to Backend API */\n    await this.__assert();\n    return res;\n  };\n\n  getERC20Contract = () => this.params.ERC20Contract;\n}\n\nexport default StakingContract;\n","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/models/custom/RealFvr/OpenerRealFvr.js",["298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330"],"import _ from 'lodash';\nimport { openerRealFvr } from '../../../interfaces';\nimport Numbers from '../../../utils/Numbers';\nimport IContract from '../../IContract';\nimport ERC20Contract from '../../ERC20/ERC20Contract';\n\n/**\n * OpenerRealFvr Object\n * @class OpenerRealFvr\n * @param {Object} params Parameters\n * @param {Address} params.contractAddress Contract Address (If Deployed)\n * @param {Address} params.tokenAddress Token Purchase Address\n */\nclass OpenerRealFvr extends IContract {\n  constructor(params = {}) {\n    super({ abi: openerRealFvr, ...params });\n  }\n\n  __assert = async () => {\n    if (!this.getAddress()) {\n      throw new Error(\n        'Contract is not deployed, first deploy it and provide a contract address',\n      );\n    }\n\n    // Use ABI\n    this.params.contract.use(openerRealFvr, this.getAddress());\n\n    // Set Token Address Contract for easy access\n    this.params.ERC20Contract = new ERC20Contract({\n      web3: this.web3,\n      contractAddress: this.tokenAddress,\n      acc: this.acc,\n    });\n\n    // Assert Token Contract\n    await this.params.ERC20Contract.__assert();\n  };\n\n  /**\n   * @function\n   * @description Buy Pack\n   * @param {Object} params Parameters\n   * @param {Integer} params.packId Pack Id\n   * @returns {Transaction} Transaction\n   */\n  buyPack = async ({ packId }) => await this.__sendTx(\n    this.params.contract.getContract().methods.buyPack(packId),\n  );\n\n  /**\n   * @function\n   * @description Offer Pack\n   * @param {Object} params Parameters\n   * @param {Integer} params.packId Pack Id\n   * @param {Address} params.receivingAddress Pack Id Integer\n   * @returns {TransactionObject} Success the Tx Object if operation was successful\n   */\n  offerPack = async ({ packId, receivingAddress }) => await this.__sendTx(\n    this.params.contract\n      .getContract()\n      .methods.offerPack(packId, receivingAddress),\n  );\n\n  /**\n   * @function\n   * @description Create Pack\n   * @param {Object} params Parameters\n   * @param {Integer} params.packNumber Pack Number\n   * @param {Integer} params.nftAmount Amount of NFTs/Tokens\n   * @param {Integer} params.price Price of Pack\n   * @param {String} params.serie Serie of Pack\n   * @param {String} params.packType Pack Type\n   * @param {String} params.drop Pack Drop\n   * @param {Date} params.saleStart Start Date\n   * @param {Address | Array} params.saleDistributionAddresses Revenue Addresses of the First Purchase\n   * @param {Integer | Array} params.saleDistributionAmounts Revenue Amounts of the First Purchase\n   * @returns {TransactionObject} Success the Tx Object if operation was successful\n   */\n  createPack = async ({\n    packNumber,\n    nftAmount,\n    price,\n    serie,\n    packType,\n    drop,\n    saleStart,\n    saleDistributionAddresses,\n    saleDistributionAmounts,\n  }) => await this.__sendTx(\n    this.params.contract\n      .getContract()\n      .methods.createPack(\n        packNumber,\n        parseInt(nftAmount, 10),\n        String(price).toString(),\n        serie,\n        packType,\n        drop,\n        Numbers.timeToSmartContractTime(saleStart),\n        saleDistributionAddresses,\n        saleDistributionAmounts,\n      ),\n  );\n\n  /**\n   * @function\n   * @description Edit Pack Info\n   * @param {Object} params Parameters\n   * @param {Integer} params.packId Pack Number\n   * @param {Date} params.saleStart Time of Start of the Sale\n   * @param {String} params.serie Serie of Pack\n   * @param {String} params.packType Pack Type\n   * @param {String} params.drop Pack Drop\n   * @param {Integer} params.price Pack Price\n   * @returns {TransactionObject} Success the Tx Object if operation was successful\n   */\n  editPackInfo = async ({\n    packId, saleStart, price, serie, packType, drop,\n  }) => await this.__sendTx(\n    this.params.contract\n      .getContract()\n      .methods.createPack(\n        packId,\n        Numbers.timeToSmartContractTime(saleStart),\n        serie,\n        packType,\n        drop,\n        String(price).toString(),\n      ),\n  );\n\n  /**\n   * @function\n   * @description Delete Pack\n   * @param {Object} params Parameters\n   * @param {Integer} params.packId Pack Id Integer\n   * @returns {TransactionObject} Success the Tx Object if operation was successful\n   */\n  deletePackById = async ({ packId }) => await this.__sendTx(\n    this.params.contract.getContract().methods.deletePackById(packId),\n  );\n\n  /**\n   * @function\n   * @description Mint Token Id (After buying a pack)\n   * @param {Object} params Parameters\n   * @param {Integer} params.tokenId Token ID\n   * @returns {TransactionObject} Success the Tx Object if operation was successful\n   */\n  mint = async ({ tokenId }) => await this.__sendTx(\n    this.params.contract.getContract().methods.mint(tokenId),\n  );\n\n  /**\n   * @function\n   * @description Set Purchase Token\n   * @param {Object} params Parameters\n   * @param {Address} params.address Token Address\n   * @returns {TransactionObject} Success the Tx Object if operation was successful\n   */\n  setPurchaseTokenAddress = async ({ address }) => await this.__sendTx(\n    this.params.contract\n      .getContract()\n      .methods.setPurchaseTokenAddress(address),\n  );\n\n  /**\n   * @function\n   * @description Lock the Contract\n   * @returns {TransactionObject} Success the Tx Object if operation was successful\n   */\n  lock = async () => await this.__sendTx(this.params.contract.getContract().methods.lock());\n\n  /**\n   * @function\n   * @description Unlock the Contract\n   * @returns {TransactionObject} Success the Tx Object if operation was successful\n   */\n  unlock = async () => await this.__sendTx(this.params.contract.getContract().methods.unlock());\n\n  /**\n   * @function\n   * @description Set Token Price of Real Fvr in USD --> 1*10**18 as input means 1 Real Fvr = $0.000001\n   * @param {Object} params Parameters\n   * @param {Address} params.address Token Address\n   * @returns {TransactionObject} Success the Tx Object if operation was successful\n   */\n  setTokenPriceInUSD = async ({ address }) => await this.__sendTx(\n    this.params.contract\n      .getContract()\n      .methods.setPurchaseTokenAddress(address),\n  );\n\n  /**\n   * @function\n   * @description Set Base Id URI\n   * @param {Object} params Parameters\n   * @param {String} params.uri URI of the Token Id Metadata JSON\n   * @returns {TransactionObject} Success the Tx Object if operation was successful\n   */\n  setBaseURI = async ({ uri }) => await this.__sendTx(\n    this.params.contract.getContract().methods.setBaseURI(uri),\n  );\n\n  /**\n   * @function\n   * @description Set Specific Token Id URI\n   * @param {Object} params Parameters\n   * @param {Integer} params.tokenId Token ID\n   * @param {String} params.uri URI of the Token Id Metadata JSON\n   * @returns {TransactionObject} Success the Tx Object if operation was successful\n   */\n  setTokenURI = async ({ tokenId, uri }) => await this.__sendTx(\n    this.params.contract.getContract().methods.setTokenURI(tokenId, uri),\n  );\n\n  /**\n   * @function\n   * @description Get Pack If Information\n   * @param {Object} params Parameters\n   * @param {Integer} params.packId\n   * @returns {Integer} packId\n   * @returns {Integer} packNumber\n   * @returns {Integer} price\n   * @returns {String} serie\n   * @returns {String} drop\n   * @returns {String} packType\n   * @returns {Address} buyer\n   * @returns {Array | Address} saleDistributionAddresses\n   * @returns {Array | Integer} saleDistributionAmounts\n   */\n  getPackbyId = async ({ packId }) => {\n    const res = await this.params.contract\n      .getContract()\n      .methods.getPackbyId(packId)\n      .call();\n\n    return {\n      packId,\n      packNumber: parseInt(res[1], 10),\n      initialNFTId: parseInt(res[2], 10),\n      price: Numbers.fromDecimals(res[3], 6),\n      serie: res[4],\n      drop: res[5],\n      packType: res[6],\n      buyer: res[7],\n      saleDistributionAddresses: res[8],\n      saleDistributionAmounts: res[9] ? res[9].map(a => parseInt(a, 10)) : [],\n    };\n  };\n\n  /**\n   * @function\n   * @description Get Token IDs that were already bought via a pack\n   * @returns {Array | Integer} TokensRegistered\n   */\n  getRegisteredTokens = async () => {\n    const res = await this.params.contract\n      .getContract()\n      .methods.getRegisteredIDs()\n      .call();\n\n    return res.map(a => parseInt(a, 10));\n  };\n\n  /**\n   * @function\n   * @description Verify if a Token was already minted\n   * @param {Object} params Parameters\n   * @param {Integer} params.tokenId\n   * @returns {Bool} wasMinted\n   */\n  exists = async ({ tokenId }) => await this.params.contract.getContract().methods.exists(tokenId).call();\n\n  /**\n   * @function\n   * @description Get Cost in Fvr Tokens of the Pack\n   * @param {Object} params Parameters\n   * @param {Integer} params.packId\n   * @returns {Integer} Price in Real Fvr Tokens\n   */\n  getPackPriceInFVR = async ({ packId }) => Numbers.fromDecimals(\n    await this.params.contract\n      .getContract()\n      .methods.getPackPriceInFVR(packId)\n      .call(),\n    this.getERC20Contract().getDecimals(),\n  );\n\n  /**\n   * @function\n   * @description Get Amount of Packs Created\n   * @returns {Integer} packsAmount\n   */\n  getAmountOfPacksCreated = async () => parseInt(\n    await this.params.contract.getContract().methods.packIncrementId().call(), 10,\n  );\n\n  /**\n   * @function\n   * @description Get Amount of Packs Opened\n   * @returns {Integer} packsAmount\n   */\n  getAmountOfPacksOpened = async () => parseInt(\n    await this.params.contract.getContract().methods._openedPacks().call(), 10,\n  );\n\n  /**\n   * @function\n   * @description Get Amount of Tokens/NFTs Created (Inherent to the Packs)\n   * @returns {Integer} tokensAmount\n   */\n  getAmountOfTokensCreated = async () => parseInt(\n    await this.params.contract.getContract().methods.lastNFTID().call(), 10,\n  );\n\n  /**\n   * @function\n   * @description User deploys the contract\n   * @param {Object} params Parameters\n   * @param {String} params.name Name of the Contract\n   * @param {String} params.symbol Symbol of the Contract\n   * @param {Address} params.tokenAddress token Address of the purchase Token in use\n   * @returns {Boolean} Success the Tx Object if operation was successful\n   */\n  deploy = async ({\n    name, symbol, tokenAddress, callback,\n  }) => {\n    const params = [name, symbol, tokenAddress];\n    const res = await this.__deploy(params, callback);\n    this.params.contractAddress = res.contractAddress;\n    /* Call to Backend API */\n    await this.__assert();\n    return res;\n  };\n\n  getERC20Contract = () => this.params.ERC20Contract;\n}\n\nexport default OpenerRealFvr;\n","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/models/index.js",[],"/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/utils/Account.js",[],"/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/utils/Contract.js",["331","332","333","334","335","336","337","338","339","340"],"class Contract {\n  constructor(web3, contract_json, address) {\n    this.web3 = web3;\n    this.json = contract_json;\n    this.abi = contract_json.abi;\n    this.address = address;\n    this.contract = new web3.eth.Contract(contract_json.abi, address);\n  }\n\n  async deploy(account, abi, byteCode, args = [], callback = () => {}) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        this.contract = new this.web3.eth.Contract(abi);\n        if (account) {\n          const txSigned = await account.getAccount().signTransaction({\n            data: this.contract\n              .deploy({\n                data: byteCode,\n                arguments: args,\n              })\n              .encodeABI(),\n            from: account.getAddress(),\n            gasPrice: 180000000000,\n            gas: 8913388,\n          });\n          this.web3.eth\n            .sendSignedTransaction(txSigned.rawTransaction)\n            .on('confirmation', (confirmationNumber, receipt) => {\n              if (confirmationNumber > 1) {\n                resolve(receipt);\n              }\n            });\n        } else {\n          const accounts = await this.web3.eth.getAccounts();\n          const res = await this.__metamaskDeploy({\n            byteCode,\n            args,\n            acc: accounts[0],\n            callback,\n          });\n          this.address = res.contractAddress;\n          resolve(res);\n        }\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  __metamaskDeploy = async ({\n    byteCode, args, acc, callback = () => {},\n  }) => new Promise((resolve, reject) => {\n    try {\n      console.log(`Contract.__metamaskDeploy.acc: ${acc}`);\n      this.getContract()\n        .deploy({\n          data: byteCode,\n          arguments: args,\n        })\n        .send({\n          from: acc,\n          // BUGFIX: without gas and gasPrice set here, we get the following error:\n          // Error: Node error: {\"message\":\"base fee exceeds gas limit\",\"code\":-32000,\"data\":{\"stack\":\"Error: base fee exceeds gas limit\n          // ,gasPrice : 180000000000\n          // ,gas : 5913388\n          gasPrice: 20000000000,\n          gas: 5913388, // 6721975\n        })\n        .on('confirmation', (confirmationNumber, receipt) => {\n          console.log(\n            `Contract.__metamaskDeploy.confirmationNumber: ${\n              confirmationNumber}`,\n          );\n          callback(confirmationNumber);\n          if (confirmationNumber > 0) {\n            resolve(receipt);\n          }\n        })\n        .on('error', (err) => {\n          console.log(`Contract.__metamaskDeploy.error: ${err}`);\n          reject(err);\n        });\n    } catch (err) {\n      console.log(`Contract.__metamaskDeploy.catch.error: ${err}`);\n      reject(err);\n    }\n  });\n\n  async use(contract_json, address) {\n    this.json = contract_json;\n    this.abi = contract_json.abi;\n    this.address = address || this.address;\n    this.contract = new this.web3.eth.Contract(contract_json.abi, this.address);\n  }\n\n  async send(account, byteCode, value = '0x0', callback = () => {}) {\n    return new Promise(async (resolve, reject) => {\n      const tx = {\n        data: byteCode,\n        from: account.address,\n        to: this.address,\n        gas: 4430000,\n        gasPrice: 200000000000,\n        value: value || '0x0',\n      };\n\n      const result = await account.signTransaction(tx);\n      this.web3.eth\n        .sendSignedTransaction(result.rawTransaction)\n        .on('confirmation', (confirmationNumber, receipt) => {\n          callback(confirmationNumber);\n          if (confirmationNumber > 0) {\n            resolve(receipt);\n          }\n        })\n        .on('error', (err) => {\n          reject(err);\n        });\n    });\n  }\n\n  getContract() {\n    return this.contract;\n  }\n\n  getABI() {\n    return this.abi;\n  }\n\n  getJSON() {\n    return this.json;\n  }\n\n  getAddress() {\n    return this.address;\n  }\n}\n\nexport default Contract;\n","/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/utils/IPFS.js",[],"/Users/ruipedro/Desktop/projects/Bepro/@bepro-js/src/utils/Numbers.js",[],{"ruleId":"341","severity":1,"message":"342","line":60,"column":9,"nodeType":"343","messageId":"344","endLine":60,"endColumn":20},{"ruleId":"345","severity":1,"message":"346","line":207,"column":12,"nodeType":"347","endLine":210,"endColumn":14},{"ruleId":"345","severity":1,"message":"346","line":220,"column":12,"nodeType":"347","endLine":223,"endColumn":14},{"ruleId":"345","severity":1,"message":"346","line":234,"column":12,"nodeType":"347","endLine":237,"endColumn":14},{"ruleId":"345","severity":1,"message":"346","line":248,"column":12,"nodeType":"347","endLine":251,"endColumn":14},{"ruleId":"348","severity":1,"message":"349","line":283,"column":24,"nodeType":"347","messageId":"350","endLine":283,"endColumn":32},{"ruleId":"348","severity":1,"message":"349","line":313,"column":24,"nodeType":"347","messageId":"350","endLine":313,"endColumn":32},{"ruleId":"348","severity":1,"message":"351","line":313,"column":34,"nodeType":"347","messageId":"350","endLine":313,"endColumn":42},{"ruleId":"345","severity":1,"message":"346","line":336,"column":12,"nodeType":"347","endLine":339,"endColumn":7},{"ruleId":"345","severity":1,"message":"346","line":346,"column":52,"nodeType":"347","endLine":350,"endColumn":5},{"ruleId":"352","severity":1,"message":"353","line":362,"column":40,"nodeType":"347","messageId":"354","endLine":362,"endColumn":46},{"ruleId":"352","severity":1,"message":"355","line":362,"column":48,"nodeType":"347","messageId":"354","endLine":362,"endColumn":55},{"ruleId":"345","severity":1,"message":"346","line":366,"column":12,"nodeType":"347","endLine":368,"endColumn":6},{"ruleId":"345","severity":1,"message":"346","line":382,"column":12,"nodeType":"347","endLine":384,"endColumn":6},{"ruleId":"345","severity":1,"message":"346","line":398,"column":12,"nodeType":"347","endLine":402,"endColumn":6},{"ruleId":"352","severity":1,"message":"353","line":416,"column":40,"nodeType":"347","messageId":"354","endLine":416,"endColumn":46},{"ruleId":"345","severity":1,"message":"346","line":420,"column":12,"nodeType":"347","endLine":422,"endColumn":6},{"ruleId":"345","severity":1,"message":"346","line":431,"column":12,"nodeType":"347","endLine":433,"endColumn":6},{"ruleId":"345","severity":1,"message":"346","line":441,"column":12,"nodeType":"347","endLine":443,"endColumn":6},{"ruleId":"345","severity":1,"message":"346","line":453,"column":12,"nodeType":"347","endLine":455,"endColumn":6},{"ruleId":"352","severity":1,"message":"353","line":470,"column":40,"nodeType":"347","messageId":"354","endLine":470,"endColumn":46},{"ruleId":"345","severity":1,"message":"346","line":474,"column":12,"nodeType":"347","endLine":478,"endColumn":6},{"ruleId":"356","severity":1,"message":"357","line":489,"column":28,"nodeType":"358","messageId":"344","endLine":489,"endColumn":30},{"ruleId":"345","severity":1,"message":"346","line":492,"column":12,"nodeType":"347","endLine":496,"endColumn":6},{"ruleId":"345","severity":1,"message":"346","line":506,"column":12,"nodeType":"347","endLine":508,"endColumn":6},{"ruleId":"345","severity":1,"message":"346","line":46,"column":12,"nodeType":"347","endLine":50,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":46,"column":18,"nodeType":"343","endLine":46,"endColumn":31},{"ruleId":"345","severity":1,"message":"346","line":87,"column":34,"nodeType":"347","endLine":87,"endColumn":84},{"ruleId":"359","severity":1,"message":"360","line":126,"column":25,"nodeType":"343","endLine":126,"endColumn":38},{"ruleId":"359","severity":1,"message":"361","line":169,"column":23,"nodeType":"343","endLine":169,"endColumn":36},{"ruleId":"359","severity":1,"message":"362","line":172,"column":11,"nodeType":"343","endLine":172,"endColumn":24},{"ruleId":"363","severity":1,"message":"364","line":1,"column":8,"nodeType":"347","endLine":1,"endColumn":9},{"ruleId":"363","severity":1,"message":"365","line":3,"column":8,"nodeType":"347","endLine":3,"endColumn":13},{"ruleId":"341","severity":1,"message":"342","line":23,"column":7,"nodeType":"343","messageId":"344","endLine":23,"endColumn":18},{"ruleId":"341","severity":1,"message":"342","line":24,"column":7,"nodeType":"343","messageId":"344","endLine":24,"endColumn":18},{"ruleId":"345","severity":1,"message":"346","line":47,"column":12,"nodeType":"347","endLine":47,"endColumn":75},{"ruleId":"345","severity":1,"message":"346","line":57,"column":43,"nodeType":"347","endLine":57,"endColumn":96},{"ruleId":"366","severity":1,"message":"367","line":105,"column":1,"nodeType":"368","messageId":"369"},{"ruleId":"345","severity":1,"message":"346","line":105,"column":39,"nodeType":"347","endLine":105,"endColumn":114},{"ruleId":"345","severity":1,"message":"346","line":163,"column":12,"nodeType":"347","endLine":167,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":163,"column":18,"nodeType":"343","endLine":163,"endColumn":31},{"ruleId":"345","severity":1,"message":"346","line":186,"column":12,"nodeType":"347","endLine":190,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":186,"column":18,"nodeType":"343","endLine":186,"endColumn":31},{"ruleId":"366","severity":1,"message":"370","line":202,"column":1,"nodeType":"368","messageId":"369"},{"ruleId":"356","severity":1,"message":"371","line":219,"column":25,"nodeType":"358","messageId":"344","endLine":219,"endColumn":27},{"ruleId":"341","severity":1,"message":"342","line":232,"column":5,"nodeType":"343","messageId":"344","endLine":232,"endColumn":16},{"ruleId":"345","severity":1,"message":"346","line":233,"column":12,"nodeType":"347","endLine":243,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":233,"column":18,"nodeType":"343","endLine":233,"endColumn":31},{"ruleId":"363","severity":1,"message":"372","line":257,"column":13,"nodeType":"347","endLine":257,"endColumn":22},{"ruleId":"345","severity":1,"message":"346","line":268,"column":12,"nodeType":"347","endLine":270,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":268,"column":18,"nodeType":"343","endLine":268,"endColumn":31},{"ruleId":"366","severity":1,"message":"373","line":275,"column":1,"nodeType":"368","messageId":"369"},{"ruleId":"366","severity":1,"message":"374","line":279,"column":1,"nodeType":"368","messageId":"369"},{"ruleId":"345","severity":1,"message":"346","line":281,"column":12,"nodeType":"347","endLine":287,"endColumn":7},{"ruleId":"359","severity":1,"message":"362","line":310,"column":11,"nodeType":"343","endLine":310,"endColumn":45},{"ruleId":"359","severity":1,"message":"361","line":323,"column":23,"nodeType":"343","endLine":323,"endColumn":36},{"ruleId":"359","severity":1,"message":"362","line":326,"column":11,"nodeType":"343","endLine":326,"endColumn":24},{"ruleId":"363","severity":1,"message":"364","line":1,"column":8,"nodeType":"347","endLine":1,"endColumn":9},{"ruleId":"359","severity":1,"message":"362","line":41,"column":11,"nodeType":"343","endLine":41,"endColumn":45},{"ruleId":"345","severity":1,"message":"346","line":50,"column":12,"nodeType":"347","endLine":53,"endColumn":14},{"ruleId":"359","severity":1,"message":"375","line":50,"column":18,"nodeType":"343","endLine":52,"endColumn":30},{"ruleId":"359","severity":1,"message":"376","line":63,"column":13,"nodeType":"343","endLine":63,"endColumn":69},{"ruleId":"345","severity":1,"message":"346","line":74,"column":12,"nodeType":"347","endLine":77,"endColumn":14},{"ruleId":"345","severity":1,"message":"346","line":86,"column":12,"nodeType":"347","endLine":86,"endColumn":80},{"ruleId":"359","severity":1,"message":"377","line":86,"column":18,"nodeType":"343","endLine":86,"endColumn":71},{"ruleId":"359","severity":1,"message":"378","line":97,"column":13,"nodeType":"343","endLine":97,"endColumn":71},{"ruleId":"345","severity":1,"message":"346","line":107,"column":12,"nodeType":"347","endLine":110,"endColumn":14},{"ruleId":"345","severity":1,"message":"346","line":119,"column":12,"nodeType":"347","endLine":119,"endColumn":77},{"ruleId":"345","severity":1,"message":"346","line":143,"column":12,"nodeType":"347","endLine":146,"endColumn":14},{"ruleId":"359","severity":1,"message":"376","line":157,"column":13,"nodeType":"343","endLine":157,"endColumn":69},{"ruleId":"359","severity":1,"message":"379","line":170,"column":13,"nodeType":"343","endLine":170,"endColumn":68},{"ruleId":"345","severity":1,"message":"346","line":181,"column":12,"nodeType":"347","endLine":184,"endColumn":7},{"ruleId":"345","severity":1,"message":"346","line":191,"column":40,"nodeType":"347","endLine":193,"endColumn":4},{"ruleId":"359","severity":1,"message":"360","line":191,"column":46,"nodeType":"343","endLine":191,"endColumn":59},{"ruleId":"345","severity":1,"message":"346","line":201,"column":47,"nodeType":"347","endLine":205,"endColumn":5},{"ruleId":"345","severity":1,"message":"346","line":213,"column":12,"nodeType":"347","endLine":215,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":213,"column":18,"nodeType":"343","endLine":213,"endColumn":31},{"ruleId":"345","severity":1,"message":"346","line":225,"column":12,"nodeType":"347","endLine":227,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":225,"column":18,"nodeType":"343","endLine":225,"endColumn":31},{"ruleId":"345","severity":1,"message":"346","line":236,"column":12,"nodeType":"347","endLine":240,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":236,"column":18,"nodeType":"343","endLine":236,"endColumn":31},{"ruleId":"345","severity":1,"message":"346","line":249,"column":12,"nodeType":"347","endLine":251,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":249,"column":18,"nodeType":"343","endLine":249,"endColumn":31},{"ruleId":"345","severity":1,"message":"346","line":260,"column":12,"nodeType":"347","endLine":264,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":260,"column":18,"nodeType":"343","endLine":260,"endColumn":31},{"ruleId":"345","severity":1,"message":"346","line":273,"column":12,"nodeType":"347","endLine":275,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":273,"column":18,"nodeType":"343","endLine":273,"endColumn":31},{"ruleId":"345","severity":1,"message":"346","line":285,"column":12,"nodeType":"347","endLine":289,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":285,"column":18,"nodeType":"343","endLine":285,"endColumn":31},{"ruleId":"359","severity":1,"message":"361","line":321,"column":23,"nodeType":"343","endLine":321,"endColumn":36},{"ruleId":"359","severity":1,"message":"362","line":324,"column":11,"nodeType":"343","endLine":324,"endColumn":24},{"ruleId":"363","severity":1,"message":"364","line":1,"column":8,"nodeType":"347","endLine":1,"endColumn":9},{"ruleId":"352","severity":1,"message":"380","line":24,"column":30,"nodeType":"347","messageId":"354","endLine":24,"endColumn":48},{"ruleId":"359","severity":1,"message":"362","line":34,"column":11,"nodeType":"343","endLine":34,"endColumn":45},{"ruleId":"345","severity":1,"message":"346","line":43,"column":12,"nodeType":"347","endLine":46,"endColumn":14},{"ruleId":"345","severity":1,"message":"346","line":55,"column":12,"nodeType":"347","endLine":58,"endColumn":14},{"ruleId":"345","severity":1,"message":"346","line":67,"column":12,"nodeType":"347","endLine":67,"endColumn":77},{"ruleId":"345","severity":1,"message":"346","line":74,"column":40,"nodeType":"347","endLine":76,"endColumn":4},{"ruleId":"359","severity":1,"message":"360","line":74,"column":46,"nodeType":"343","endLine":74,"endColumn":59},{"ruleId":"345","severity":1,"message":"346","line":85,"column":12,"nodeType":"347","endLine":87,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":85,"column":18,"nodeType":"343","endLine":85,"endColumn":31},{"ruleId":"359","severity":1,"message":"361","line":99,"column":23,"nodeType":"343","endLine":99,"endColumn":36},{"ruleId":"359","severity":1,"message":"362","line":102,"column":11,"nodeType":"343","endLine":102,"endColumn":24},{"ruleId":"363","severity":1,"message":"364","line":1,"column":8,"nodeType":"347","endLine":1,"endColumn":9},{"ruleId":"359","severity":1,"message":"362","line":50,"column":13,"nodeType":"343","endLine":50,"endColumn":26},{"ruleId":"341","severity":1,"message":"342","line":81,"column":9,"nodeType":"343","messageId":"344","endLine":81,"endColumn":20},{"ruleId":"359","severity":1,"message":"381","line":82,"column":21,"nodeType":"343","endLine":82,"endColumn":40},{"ruleId":"345","severity":1,"message":"346","line":110,"column":42,"nodeType":"347","endLine":116,"endColumn":4},{"ruleId":"359","severity":1,"message":"361","line":134,"column":23,"nodeType":"343","endLine":134,"endColumn":36},{"ruleId":"359","severity":1,"message":"362","line":137,"column":11,"nodeType":"343","endLine":137,"endColumn":24},{"ruleId":"345","severity":1,"message":"346","line":147,"column":12,"nodeType":"347","endLine":149,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":147,"column":18,"nodeType":"343","endLine":147,"endColumn":31},{"ruleId":"345","severity":1,"message":"346","line":158,"column":12,"nodeType":"347","endLine":158,"endColumn":75},{"ruleId":"345","severity":1,"message":"346","line":167,"column":12,"nodeType":"347","endLine":167,"endColumn":76},{"ruleId":"345","severity":1,"message":"346","line":176,"column":12,"nodeType":"347","endLine":178,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":176,"column":18,"nodeType":"343","endLine":176,"endColumn":31},{"ruleId":"345","severity":1,"message":"346","line":187,"column":12,"nodeType":"347","endLine":189,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":187,"column":18,"nodeType":"343","endLine":187,"endColumn":31},{"ruleId":"345","severity":1,"message":"346","line":201,"column":12,"nodeType":"347","endLine":205,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":201,"column":18,"nodeType":"343","endLine":201,"endColumn":31},{"ruleId":"366","severity":1,"message":"382","line":210,"column":1,"nodeType":"368","messageId":"369"},{"ruleId":"345","severity":1,"message":"346","line":214,"column":12,"nodeType":"347","endLine":216,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":214,"column":18,"nodeType":"343","endLine":214,"endColumn":31},{"ruleId":"345","severity":1,"message":"346","line":225,"column":12,"nodeType":"347","endLine":229,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":225,"column":18,"nodeType":"343","endLine":225,"endColumn":31},{"ruleId":"366","severity":1,"message":"383","line":280,"column":1,"nodeType":"368","messageId":"369"},{"ruleId":"363","severity":1,"message":"364","line":1,"column":8,"nodeType":"347","endLine":1,"endColumn":9},{"ruleId":"359","severity":1,"message":"360","line":40,"column":23,"nodeType":"343","endLine":40,"endColumn":36},{"ruleId":"348","severity":1,"message":"384","line":56,"column":24,"nodeType":"347","messageId":"350","endLine":56,"endColumn":32},{"ruleId":"359","severity":1,"message":"360","line":57,"column":21,"nodeType":"343","endLine":57,"endColumn":34},{"ruleId":"348","severity":1,"message":"384","line":82,"column":30,"nodeType":"347","messageId":"350","endLine":82,"endColumn":38},{"ruleId":"359","severity":1,"message":"360","line":83,"column":21,"nodeType":"343","endLine":83,"endColumn":34},{"ruleId":"348","severity":1,"message":"384","line":115,"column":30,"nodeType":"347","messageId":"350","endLine":115,"endColumn":38},{"ruleId":"348","severity":1,"message":"385","line":115,"column":40,"nodeType":"347","messageId":"350","endLine":115,"endColumn":54},{"ruleId":"359","severity":1,"message":"360","line":116,"column":21,"nodeType":"343","endLine":116,"endColumn":34},{"ruleId":"345","severity":1,"message":"346","line":143,"column":12,"nodeType":"347","endLine":146,"endColumn":14},{"ruleId":"348","severity":1,"message":"384","line":158,"column":28,"nodeType":"347","messageId":"350","endLine":158,"endColumn":36},{"ruleId":"348","severity":1,"message":"385","line":158,"column":38,"nodeType":"347","messageId":"350","endLine":158,"endColumn":52},{"ruleId":"348","severity":1,"message":"386","line":158,"column":54,"nodeType":"347","messageId":"350","endLine":158,"endColumn":70},{"ruleId":"359","severity":1,"message":"360","line":160,"column":13,"nodeType":"343","endLine":160,"endColumn":26},{"ruleId":"348","severity":1,"message":"384","line":178,"column":27,"nodeType":"347","messageId":"350","endLine":178,"endColumn":35},{"ruleId":"348","severity":1,"message":"385","line":178,"column":37,"nodeType":"347","messageId":"350","endLine":178,"endColumn":51},{"ruleId":"348","severity":1,"message":"386","line":178,"column":53,"nodeType":"347","messageId":"350","endLine":178,"endColumn":69},{"ruleId":"345","severity":1,"message":"346","line":179,"column":12,"nodeType":"347","endLine":182,"endColumn":14},{"ruleId":"348","severity":1,"message":"384","line":193,"column":28,"nodeType":"347","messageId":"350","endLine":193,"endColumn":36},{"ruleId":"348","severity":1,"message":"385","line":193,"column":38,"nodeType":"347","messageId":"350","endLine":193,"endColumn":52},{"ruleId":"348","severity":1,"message":"386","line":193,"column":54,"nodeType":"347","messageId":"350","endLine":193,"endColumn":70},{"ruleId":"345","severity":1,"message":"346","line":194,"column":12,"nodeType":"347","endLine":197,"endColumn":14},{"ruleId":"356","severity":1,"message":"371","line":217,"column":19,"nodeType":"358","messageId":"344","endLine":217,"endColumn":21},{"ruleId":"345","severity":1,"message":"346","line":221,"column":12,"nodeType":"347","endLine":227,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":221,"column":18,"nodeType":"343","endLine":221,"endColumn":31},{"ruleId":"348","severity":1,"message":"384","line":238,"column":27,"nodeType":"347","messageId":"350","endLine":238,"endColumn":35},{"ruleId":"348","severity":1,"message":"385","line":238,"column":37,"nodeType":"347","messageId":"350","endLine":238,"endColumn":51},{"ruleId":"345","severity":1,"message":"346","line":238,"column":58,"nodeType":"347","endLine":242,"endColumn":4},{"ruleId":"359","severity":1,"message":"360","line":238,"column":64,"nodeType":"343","endLine":238,"endColumn":77},{"ruleId":"348","severity":1,"message":"384","line":250,"column":27,"nodeType":"347","messageId":"350","endLine":250,"endColumn":35},{"ruleId":"345","severity":1,"message":"346","line":252,"column":12,"nodeType":"347","endLine":256,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":252,"column":18,"nodeType":"343","endLine":252,"endColumn":31},{"ruleId":"348","severity":1,"message":"384","line":265,"column":30,"nodeType":"347","messageId":"350","endLine":265,"endColumn":38},{"ruleId":"345","severity":1,"message":"346","line":265,"column":45,"nodeType":"347","endLine":267,"endColumn":4},{"ruleId":"359","severity":1,"message":"360","line":265,"column":51,"nodeType":"343","endLine":265,"endColumn":64},{"ruleId":"348","severity":1,"message":"384","line":277,"column":18,"nodeType":"347","messageId":"350","endLine":277,"endColumn":26},{"ruleId":"348","severity":1,"message":"385","line":277,"column":28,"nodeType":"347","messageId":"350","endLine":277,"endColumn":42},{"ruleId":"348","severity":1,"message":"386","line":277,"column":44,"nodeType":"347","messageId":"350","endLine":277,"endColumn":60},{"ruleId":"348","severity":1,"message":"386","line":279,"column":5,"nodeType":"347","messageId":"350","endLine":279,"endColumn":21},{"ruleId":"345","severity":1,"message":"346","line":286,"column":12,"nodeType":"347","endLine":292,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":286,"column":18,"nodeType":"343","endLine":286,"endColumn":31},{"ruleId":"348","severity":1,"message":"384","line":303,"column":19,"nodeType":"347","messageId":"350","endLine":303,"endColumn":27},{"ruleId":"348","severity":1,"message":"385","line":303,"column":29,"nodeType":"347","messageId":"350","endLine":303,"endColumn":43},{"ruleId":"348","severity":1,"message":"386","line":303,"column":45,"nodeType":"347","messageId":"350","endLine":303,"endColumn":61},{"ruleId":"345","severity":1,"message":"346","line":303,"column":68,"nodeType":"347","endLine":307,"endColumn":4},{"ruleId":"359","severity":1,"message":"360","line":303,"column":74,"nodeType":"343","endLine":303,"endColumn":87},{"ruleId":"348","severity":1,"message":"384","line":317,"column":28,"nodeType":"347","messageId":"350","endLine":317,"endColumn":36},{"ruleId":"348","severity":1,"message":"385","line":317,"column":38,"nodeType":"347","messageId":"350","endLine":317,"endColumn":52},{"ruleId":"363","severity":1,"message":"387","line":317,"column":38,"nodeType":"347","endLine":317,"endColumn":52},{"ruleId":"348","severity":1,"message":"386","line":317,"column":54,"nodeType":"347","messageId":"350","endLine":317,"endColumn":70},{"ruleId":"345","severity":1,"message":"346","line":317,"column":77,"nodeType":"347","endLine":321,"endColumn":4},{"ruleId":"359","severity":1,"message":"360","line":317,"column":83,"nodeType":"343","endLine":317,"endColumn":96},{"ruleId":"352","severity":1,"message":"388","line":320,"column":40,"nodeType":"347","messageId":"354","endLine":320,"endColumn":53},{"ruleId":"348","severity":1,"message":"384","line":331,"column":28,"nodeType":"347","messageId":"350","endLine":331,"endColumn":36},{"ruleId":"348","severity":1,"message":"385","line":331,"column":38,"nodeType":"347","messageId":"350","endLine":331,"endColumn":52},{"ruleId":"348","severity":1,"message":"386","line":331,"column":54,"nodeType":"347","messageId":"350","endLine":331,"endColumn":70},{"ruleId":"345","severity":1,"message":"346","line":331,"column":77,"nodeType":"347","endLine":335,"endColumn":4},{"ruleId":"359","severity":1,"message":"360","line":331,"column":83,"nodeType":"343","endLine":331,"endColumn":96},{"ruleId":"348","severity":1,"message":"384","line":344,"column":27,"nodeType":"347","messageId":"350","endLine":344,"endColumn":35},{"ruleId":"348","severity":1,"message":"385","line":344,"column":37,"nodeType":"347","messageId":"350","endLine":344,"endColumn":51},{"ruleId":"345","severity":1,"message":"346","line":344,"column":58,"nodeType":"347","endLine":348,"endColumn":4},{"ruleId":"359","severity":1,"message":"360","line":344,"column":64,"nodeType":"343","endLine":344,"endColumn":77},{"ruleId":"359","severity":1,"message":"361","line":357,"column":23,"nodeType":"343","endLine":357,"endColumn":36},{"ruleId":"359","severity":1,"message":"362","line":360,"column":5,"nodeType":"343","endLine":360,"endColumn":18},{"ruleId":"345","severity":1,"message":"346","line":36,"column":12,"nodeType":"347","endLine":39,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":36,"column":18,"nodeType":"343","endLine":36,"endColumn":31},{"ruleId":"345","severity":1,"message":"346","line":47,"column":43,"nodeType":"347","endLine":47,"endColumn":96},{"ruleId":"359","severity":1,"message":"360","line":55,"column":23,"nodeType":"343","endLine":55,"endColumn":36},{"ruleId":"359","severity":1,"message":"360","line":68,"column":23,"nodeType":"343","endLine":68,"endColumn":36},{"ruleId":"359","severity":1,"message":"360","line":81,"column":23,"nodeType":"343","endLine":81,"endColumn":36},{"ruleId":"359","severity":1,"message":"360","line":100,"column":23,"nodeType":"343","endLine":100,"endColumn":36},{"ruleId":"345","severity":1,"message":"346","line":135,"column":12,"nodeType":"347","endLine":152,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":135,"column":18,"nodeType":"343","endLine":135,"endColumn":31},{"ruleId":"345","severity":1,"message":"346","line":160,"column":29,"nodeType":"347","endLine":163,"endColumn":4},{"ruleId":"359","severity":1,"message":"360","line":160,"column":35,"nodeType":"343","endLine":160,"endColumn":48},{"ruleId":"348","severity":1,"message":"389","line":180,"column":25,"nodeType":"347","messageId":"350","endLine":180,"endColumn":35},{"ruleId":"359","severity":1,"message":"360","line":181,"column":23,"nodeType":"343","endLine":181,"endColumn":36},{"ruleId":"345","severity":1,"message":"346","line":216,"column":12,"nodeType":"347","endLine":222,"endColumn":7},{"ruleId":"348","severity":1,"message":"389","line":232,"column":40,"nodeType":"347","messageId":"350","endLine":232,"endColumn":50},{"ruleId":"345","severity":1,"message":"346","line":250,"column":12,"nodeType":"347","endLine":254,"endColumn":6},{"ruleId":"359","severity":1,"message":"360","line":250,"column":18,"nodeType":"343","endLine":250,"endColumn":31},{"ruleId":"348","severity":1,"message":"390","line":270,"column":30,"nodeType":"347","messageId":"350","endLine":270,"endColumn":45},{"ruleId":"348","severity":1,"message":"389","line":270,"column":47,"nodeType":"347","messageId":"350","endLine":270,"endColumn":57},{"ruleId":"359","severity":1,"message":"360","line":271,"column":23,"nodeType":"343","endLine":271,"endColumn":36},{"ruleId":"348","severity":1,"message":"389","line":303,"column":35,"nodeType":"347","messageId":"350","endLine":303,"endColumn":45},{"ruleId":"348","severity":1,"message":"390","line":303,"column":47,"nodeType":"347","messageId":"350","endLine":303,"endColumn":62},{"ruleId":"345","severity":1,"message":"346","line":303,"column":69,"nodeType":"347","endLine":307,"endColumn":4},{"ruleId":"359","severity":1,"message":"360","line":303,"column":75,"nodeType":"343","endLine":303,"endColumn":88},{"ruleId":"359","severity":1,"message":"360","line":316,"column":23,"nodeType":"343","endLine":316,"endColumn":36},{"ruleId":"345","severity":1,"message":"346","line":338,"column":16,"nodeType":"347","endLine":343,"endColumn":10},{"ruleId":"348","severity":1,"message":"390","line":339,"column":48,"nodeType":"347","messageId":"350","endLine":339,"endColumn":63},{"ruleId":"345","severity":1,"message":"346","line":355,"column":12,"nodeType":"347","endLine":358,"endColumn":7},{"ruleId":"366","severity":1,"message":"391","line":363,"column":1,"nodeType":"368","messageId":"369"},{"ruleId":"359","severity":1,"message":"362","line":409,"column":11,"nodeType":"343","endLine":409,"endColumn":45},{"ruleId":"359","severity":1,"message":"361","line":422,"column":23,"nodeType":"343","endLine":422,"endColumn":36},{"ruleId":"359","severity":1,"message":"362","line":425,"column":11,"nodeType":"343","endLine":425,"endColumn":24},{"ruleId":"363","severity":1,"message":"364","line":1,"column":8,"nodeType":"347","endLine":1,"endColumn":9},{"ruleId":"359","severity":1,"message":"362","line":37,"column":11,"nodeType":"343","endLine":37,"endColumn":45},{"ruleId":"345","severity":1,"message":"346","line":47,"column":35,"nodeType":"347","endLine":49,"endColumn":4},{"ruleId":"359","severity":1,"message":"360","line":47,"column":41,"nodeType":"343","endLine":47,"endColumn":54},{"ruleId":"345","severity":1,"message":"346","line":59,"column":55,"nodeType":"347","endLine":63,"endColumn":4},{"ruleId":"359","severity":1,"message":"360","line":59,"column":61,"nodeType":"343","endLine":59,"endColumn":74},{"ruleId":"366","severity":1,"message":"374","line":76,"column":1,"nodeType":"368","messageId":"369"},{"ruleId":"345","severity":1,"message":"346","line":90,"column":9,"nodeType":"347","endLine":104,"endColumn":4},{"ruleId":"359","severity":1,"message":"360","line":90,"column":15,"nodeType":"343","endLine":90,"endColumn":28},{"ruleId":"345","severity":1,"message":"346","line":120,"column":9,"nodeType":"347","endLine":131,"endColumn":4},{"ruleId":"359","severity":1,"message":"360","line":120,"column":15,"nodeType":"343","endLine":120,"endColumn":28},{"ruleId":"345","severity":1,"message":"346","line":140,"column":42,"nodeType":"347","endLine":142,"endColumn":4},{"ruleId":"359","severity":1,"message":"360","line":140,"column":48,"nodeType":"343","endLine":140,"endColumn":61},{"ruleId":"345","severity":1,"message":"346","line":151,"column":33,"nodeType":"347","endLine":153,"endColumn":4},{"ruleId":"359","severity":1,"message":"360","line":151,"column":39,"nodeType":"343","endLine":151,"endColumn":52},{"ruleId":"345","severity":1,"message":"346","line":162,"column":52,"nodeType":"347","endLine":166,"endColumn":4},{"ruleId":"359","severity":1,"message":"360","line":162,"column":58,"nodeType":"343","endLine":162,"endColumn":71},{"ruleId":"345","severity":1,"message":"346","line":173,"column":22,"nodeType":"347","endLine":173,"endColumn":92},{"ruleId":"359","severity":1,"message":"360","line":173,"column":28,"nodeType":"343","endLine":173,"endColumn":41},{"ruleId":"345","severity":1,"message":"346","line":180,"column":24,"nodeType":"347","endLine":180,"endColumn":96},{"ruleId":"359","severity":1,"message":"360","line":180,"column":30,"nodeType":"343","endLine":180,"endColumn":43},{"ruleId":"366","severity":1,"message":"392","line":184,"column":1,"nodeType":"368","messageId":"369"},{"ruleId":"345","severity":1,"message":"346","line":189,"column":47,"nodeType":"347","endLine":193,"endColumn":4},{"ruleId":"359","severity":1,"message":"360","line":189,"column":53,"nodeType":"343","endLine":189,"endColumn":66},{"ruleId":"345","severity":1,"message":"346","line":202,"column":35,"nodeType":"347","endLine":204,"endColumn":4},{"ruleId":"359","severity":1,"message":"360","line":202,"column":41,"nodeType":"343","endLine":202,"endColumn":54},{"ruleId":"345","severity":1,"message":"346","line":214,"column":45,"nodeType":"347","endLine":216,"endColumn":4},{"ruleId":"359","severity":1,"message":"360","line":214,"column":51,"nodeType":"343","endLine":214,"endColumn":64},{"ruleId":"366","severity":1,"message":"393","line":274,"column":1,"nodeType":"368","messageId":"369"},{"ruleId":"345","severity":1,"message":"346","line":274,"column":35,"nodeType":"347","endLine":274,"endColumn":106},{"ruleId":"359","severity":1,"message":"379","line":306,"column":11,"nodeType":"343","endLine":306,"endColumn":66},{"ruleId":"359","severity":1,"message":"361","line":331,"column":23,"nodeType":"343","endLine":331,"endColumn":36},{"ruleId":"359","severity":1,"message":"362","line":334,"column":11,"nodeType":"343","endLine":334,"endColumn":24},{"ruleId":"348","severity":1,"message":"394","line":2,"column":21,"nodeType":"347","messageId":"350","endLine":2,"endColumn":34},{"ruleId":"348","severity":1,"message":"394","line":4,"column":17,"nodeType":"347","messageId":"350","endLine":4,"endColumn":30},{"ruleId":"359","severity":1,"message":"395","line":35,"column":29,"nodeType":"343","endLine":35,"endColumn":50},{"ruleId":"341","severity":1,"message":"342","line":54,"column":7,"nodeType":"343","messageId":"344","endLine":54,"endColumn":18},{"ruleId":"366","severity":1,"message":"396","line":63,"column":1,"nodeType":"368","messageId":"369"},{"ruleId":"341","severity":1,"message":"342","line":70,"column":11,"nodeType":"343","messageId":"344","endLine":70,"endColumn":22},{"ruleId":"341","severity":1,"message":"342","line":80,"column":11,"nodeType":"343","messageId":"344","endLine":80,"endColumn":22},{"ruleId":"341","severity":1,"message":"342","line":84,"column":7,"nodeType":"343","messageId":"344","endLine":84,"endColumn":18},{"ruleId":"348","severity":1,"message":"394","line":89,"column":13,"nodeType":"347","messageId":"350","endLine":89,"endColumn":26},{"ruleId":"348","severity":1,"message":"394","line":90,"column":17,"nodeType":"347","messageId":"350","endLine":90,"endColumn":30},"no-console","Unexpected console statement.","MemberExpression","unexpected","no-return-await","Redundant use of `await` on a return value.","Identifier","camelcase","Identifier 'issue_id' is not in camel case.","notCamelCase","Identifier 'merge_id' is not in camel case.","no-undef","'amount' is not defined.","undef","'address' is not defined.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","no-underscore-dangle","Unexpected dangling '_' in '__sendTx'.","Unexpected dangling '_' in '__deploy'.","Unexpected dangling '_' in '__assert'.","no-unused-vars","'_' is defined but never used.","'dayjs' is defined but never used.","max-len","This line has a length of 114. Maximum allowed is 100.","Program","max","This line has a length of 118. Maximum allowed is 100.","Expected '===' and instead saw '=='.","'startDate' is assigned a value but never used.","This line has a length of 104. Maximum allowed is 100.","This line has a length of 102. Maximum allowed is 100.","Unexpected dangling '_' in '_purchaseToken'.","Unexpected dangling '_' in '_pricePerPack'.","Unexpected dangling '_' in '_isLimited'.","Unexpected dangling '_' in '_currentTokenId'.","Unexpected dangling '_' in '_openedPacks'.","'erc721collectibles' is not defined.","Unexpected dangling '_' in '__metamaskCall'.","This line has a length of 133. Maximum allowed is 100.","This line has a length of 108. Maximum allowed is 100.","Identifier 'event_id' is not in camel case.","Identifier 'resultSpace_id' is not in camel case.","Identifier 'fractions_amount' is not in camel case.","'resultSpace_id' is defined but never used.","'resultSpaceId' is not defined.","Identifier 'product_id' is not in camel case.","Identifier 'subscription_id' is not in camel case.","This line has a length of 117. Maximum allowed is 100.","This line has a length of 103. Maximum allowed is 100.","This line has a length of 106. Maximum allowed is 100.","Identifier 'contract_json' is not in camel case.","Unexpected dangling '_' in '__metamaskDeploy'.","This line has a length of 136. Maximum allowed is 100."]